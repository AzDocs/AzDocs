parameters:
  - name: EnvironmentName
    type: string
    default: dev
  - name: SubscriptionName
    type: string
    default: AZDOCSREGRESSIONTESTSUBSCRIPTION
  - name: DeployInfra
    type: boolean
    default: true

stages:
  - stage: ${{ parameters.EnvironmentName }}
    displayName: ${{ format('Deploy to {0}', parameters.EnvironmentName) }}
    pool:
      vmImage: $(Stage.Pool)
    variables:
      # Basic
      - name: Location
        value: westeurope
      - name: DeployInfra
        value: "${{ parameters.DeployInfra }}"
      - name: ResourceBaseName
        value: $(CompanyName)-$(ProjectName)
      - name: ResourceGroupName
        value: $(ResourceBaseName)-${{ parameters.EnvironmentName }}
      - name: ResourceTags
        value: "@('BillingIdentifier=$(Tag.BillingIdentifier)'; 'EnvironmentType=${{ parameters.EnvironmentName }}'; 'ApplicationName=$(Tag.ApplicationName)'; 'AppTechOwner=$(Tag.AppTechOwner)'; 'ApplicationOwner=$(Tag.ApplicationOwner)'; 'ApplicationID=$(Tag.ApplicationID)'; 'BusinessUnit=$(Tag.BusinessUnit)'; 'CostType=$(Tag.CostType)'; 'Tier=$(Tag.Tier)';'TeamName=$(Tag.TeamName)';'ProjectName=$(ProjectName)')"

      # VNet
      - name: VnetName
        value: "$(ResourceBaseName)-vnet-${{ parameters.EnvironmentName }}"
      - name: VnetResourceGroupName
        value: $(ResourceGroupName)
      - name: VnetCidr
        value: 10.0.0.0/8
      - name: DNSServers
        value: "168.63.129.16"

      # AppService
      - name: AppServicePlanSkuName
        value: P1v3
      - name: AppServiceRunTime
        value: DOTNET|5.0
      - name: LinuxAppServicePlanName
        value: "${{ format('{0}-ASP-{1}-Linux', variables.ResourceBaseName, parameters.EnvironmentName) }}"
      - name: WindowsAppServicePlanName
        value: "${{ format('{0}-ASP-{1}-Windows', variables.ResourceBaseName, parameters.EnvironmentName) }}"
      - name: AppServicePlanResourceGroupName
        value: $(ResourceGroupName)
      - name: AppServiceResourceGroupName
        value: $(ResourceGroupName)
      - name: VNetWhitelistingAppServiceName
        value: "$(ResourceBaseName)-v-${{ parameters.EnvironmentName }}"
      - name: PrivateEndpointAppServiceName
        value: "$(ResourceBaseName)-e-${{ parameters.EnvironmentName }}"
      - name: PublicAppServiceName
        value: "$(ResourceBaseName)-p-${{ parameters.EnvironmentName }}"
      - name: AppServiceAlwaysOn
        value: $True
      - name: ASPNETCORE_ENVIRONMENT
        value: development
      - name: AppServicePlanNumberOfWorkerInstances
        value: 2
      - name: AppServiceNumberOfInstances
        value: 2
      - name: AppServiceDeploymentSlotName
        value: staging
      - name: ApplyToAllSlots
        value: $True
      - name: AppInsightsName
        value: "$(ResourceBaseName)-${{ parameters.EnvironmentName }}"
      - name: AppInsightsResourceGroupName
        value: $(ResourceGroupName)
      - name: AppServiceVnetIntegrationSubnetName
        value: "$(ResourceBaseName)-appservice-subnet"
      - name: AppServiceVnetIntegrationSubnet
        value: 10.0.1.0/24
      - name: AppServiceVnetIntegrationVnetName
        value: $(VnetName)
      # Private Endpoint AppService
      - name: AppServicePrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: AppServicePrivateEndpointVnetName
        value: $(VnetName)
      - name: AppServicePrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: AppServiceCertificateName
        value: MyRootCA
      - name: AppServiceCertificateFilePath
        value: tests/Tests.Regression/Pipeline.TestFiles/AzDocsDummyRootCA.cer

      # App Service AppSettings
      - name: AppServiceAppSettings
        value: >-
          @(
          'KeyvaultName=$(PublicKeyvaultName)';
          'KeyvaultKey=$(KeyvaultKeyName)';
          'KeyvaultSecret=$(KeyvaultSecretName)';
          'StorageAccount=$(PublicStorageAccountNameToLower)';
          'QueueName=$(StorageAccountQueueName)';
          'FileShareName=$(StorageAccountFileShareName)';
          )

      # App Service ConnectionStrings
      - name: AppServiceConnectionStringsInJson
        value: "[$(MySqlConnectionString), $(PostgreSQLConnectionString), $(SqlConnectionString), $(RedisConnectionString), $(StorageConnectionString)]"
      - name: MySqlConnectionString
        value: '{"name": "MySqlConnectionString", "value": "$(ConnectionStrings__MySql)", "type": "Custom", "slotSetting": false}'
      - name: ConnectionStrings__MySql
        value: "Server=$(PublicMySqlServerName).mysql.database.azure.com; Port=3306; Database=$(MySqlDatabaseName); Uid=$(MySqlServerUsername)@$(PublicMySqlServerName); Pwd=$(MySqlServerPassword); SslMode=Preferred;"
      - name: PostgreSQLConnectionString
        value: '{"name": "PostgreSQLConnectionString", "value": "$(ConnectionStrings__PostgreSQL)", "type": "Custom", "slotSetting": false}'
      - name: ConnectionStrings__PostgreSQL
        value: "Server=$(PublicPostgreSqlServerName).postgres.database.azure.com;User Id=$(PostgreSqlServerUsername)@$(PublicPostgreSqlServerName);Password=$(PostgreSqlServerPassword);Database=$(PostgreSqlDatabaseName);Ssl Mode=Require;"
      - name: SqlConnectionString
        value: '{"name": "SqlConnectionString", "value": "$(ConnectionStrings__SqlServer)", "type": "Custom", "slotSetting": false}'
      - name: ConnectionStrings__SqlServer
        value: "Server=tcp:$(PublicSqlServerName).database.windows.net,1433;Database=$(SqlDatabaseName);"
      - name: RedisConnectionString
        value: '{"name": "RedisConnectionString", "value": "$(ConnectionStrings__Redis)", "type": "Custom", "slotSetting": false}'
      - name: ConnectionStrings__Redis
        value: "$(GetRedisCacheConnectionStringforPipeline.RedisConnectionString)"
      - name: StorageConnectionString
        value: '{"name": "StorageConnectionString", "value": "$(ConnectionStrings__Storage)", "type": "Custom", "slotSetting": false}'
      - name: ConnectionStrings__Storage
        value: "DefaultEndpointsProtocol=https;AccountName=$(PublicStorageAccountNameToLower);EndpointSuffix=core.windows.net"

      # App Configuration
      - name: PublicAppConfigName
        value: $(ResourceBaseName)-papc-${{ parameters.EnvironmentName }}
      - name: PrivateEndpointAppConfigName
        value: $(ResourceBaseName)-eapc-${{ parameters.EnvironmentName }}
      - name: AppConfigLocation
        value: $(Location)
      - name: AppConfigResourceGroupName
        value: $(ResourceGroupName)
      - name: AppConfigSku
        value: Standard
      - name: AppConfigPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: AppConfigPrivateEndpointVnetName
        value: $(VnetName)
      - name: AppConfigPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: AppConfigLabel
        value: ${{ parameters.EnvironmentName }}
      - name: AppConfigKeyPrefix
        value: testapi

      # Application Gateway
      - name: ApplicationGatewayName
        value: $(ResourceBaseName)-appgw-${{ parameters.EnvironmentName }}
      - name: ApplicationGatewayResourceGroupName
        value: $(ResourceGroupName)
      - name: ApplicationGatewayVnetName
        value: $(VnetName)
      - name: ApplicationGatewayVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: ApplicationGatewaySubnetName
        value: "$(ResourceBaseName)-appgw-subnet"
      - name: ApplicationGatewaySubnet
        value: 10.0.3.0/24
      - name: ApplicationGatewayCapacity
        value: 2
      - name: ApplicationGatewaySku
        value: Standard_v2

      # Application Gateway Entrypoint
      - name: GatewayType
        value: "Public"
      - name: BackendDomainName
        value: $(VNetWhitelistingAppServiceName).azurewebsites.net
      - name: PublicStagingDomainName
        value: $(PublicAppServiceName)-staging.azurewebsites.net
      - name: HealthProbePath
        value: "/"
      - name: GatewayRuleType
        value: "Basic"
      - name: HealthProbeInterval
        value: "60"
      - name: HealthProbeThreshold
        value: "2"
      - name: HealthProbeTimeout
        value: "20"
      - name: HealthProbeProtocol
        value: "HTTPS"
      - name: HttpsSettingsProtocol
        value: "HTTPS"
      - name: HttpsSettingsPort
        value: "443"
      - name: HttpsSettingsCookieAffinity
        value: "Disabled"
      - name: HttpsSettingsConnectionDrainingTimeout
        value: "0"
      - name: HttpsSettingsTimeout
        value: "30"
      - name: MatchStatusCodes
        value: "200-399"

      # Functions
      - name: VNetWhitelistingFunctionAppName
        value: "$(ResourceBaseName)-vfunc-${{ parameters.EnvironmentName }}"
      - name: PrivateEndpointFunctionAppName
        value: "$(ResourceBaseName)-efunc-${{ parameters.EnvironmentName }}"
      - name: PublicFunctionAppName
        value: "$(ResourceBaseName)-pfunc-${{ parameters.EnvironmentName }}"
      - name: FunctionAppResourceGroupName
        value: $(ResourceGroupName)
      - name: PublicFunctionAppStorageAccountName
        value: $(PublicStorageAccountNameToLower)
      - name: VNetWhitelistingFunctionAppStorageAccountName
        value: $(VNetWhitelistingStorageAccountNameToLower)
      - name: PrivateEndpointFunctionAppStorageAccountName
        value: $(PrivateEndpointStorageAccountNameToLower)
      - name: FunctionAppOSType
        value: Linux
      - name: FunctionAppAlwaysOn
        value: $true
      - name: FUNCTIONS_EXTENSION_VERSION
        value: ~3
      - name: FunctionAppNumberOfInstances
        value: 2
      - name: FunctionAppRuntime
        value: dotnet
      - name: FunctionAppPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: FunctionAppPrivateEndpointVnetName
        value: $(VnetName)
      - name: FunctionAppPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: FunctionAppCertificateName
        value: MyRootCA
      - name: FunctionAppCertificateFilePath
        value: tests/Tests.Regression/Pipeline.TestFiles/AzDocsDummyRootCA.cer

      # Keyvault
      - name: VNetWhitelistingKeyvaultName
        value: $(ResourceBaseName)vkv${{ parameters.EnvironmentName }}
      - name: PrivateEndpointKeyvaultName
        value: $(ResourceBaseName)ekv${{ parameters.EnvironmentName }}
      - name: PublicKeyvaultName
        value: $(ResourceBaseName)pkv${{ parameters.EnvironmentName }}
      - name: KeyvaultResourceGroupName
        value: $(ResourceGroupName)
      - name: KeyvaultPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: KeyvaultPrivateEndpointVnetName
        value: $(VnetName)
      - name: KeyvaultPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: KeyvaultPrivateDnsZoneName
        value: privatelink.vaultcore.azure.net
      - name: KeyvaultKeyName
        value: mykey
      - name: KeyvaultSecretName
        value: mysecret

      # SQL Server
      - name: VNetWhitelistingSqlServerName
        value: $(ResourceBaseName)-vsql-${{ parameters.EnvironmentName }}
      - name: PrivateEndpointSqlServerName
        value: $(ResourceBaseName)-esql-${{ parameters.EnvironmentName }}
      - name: PublicSqlServerName
        value: $(ResourceBaseName)-psql-${{ parameters.EnvironmentName }}
      - name: SqlServerPassword
        value: $(ResourcePassword)
      - name: SqlServerResourceGroupName
        value: $(ResourceGroupName)
      - name: SqlServerUsername
        value: sqluser
      - name: SqlServerMinimalTlsVersion
        value: 1.2
      - name: SqlServerPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: SqlServerPrivateEndpointVnetName
        value: $(VnetName)
      - name: SqlServerPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: SqlServerPrivateDnsZoneName
        value: privatelink.database.windows.net

      # AppService Details for VNet Integration to other services
      - name: ApplicationSubnetName
        value: $(AppServiceVnetIntegrationSubnetName)
      - name: ApplicationVnetName
        value: $(VnetName)
      - name: ApplicationVnetResourceGroupName
        value: $(VnetResourceGroupName)

      # Private Endpoint General Details
      - name: DNSZoneResourceGroupName
        value: $(ResourceGroupName)
      - name: PrivateEndpointSubnetName
        value: "$(ResourceBaseName)-privateendpoints-subnet"
      - name: PrivateEndpointSubnet
        value: 10.0.2.0/24

      # SQL Database
      - name: SqlDatabaseName
        value: testdb
      - name: SqlDatabaseEdition
        value: GeneralPurpose
      - name: SqlDatabaseFamily
        value: Gen5
      - name: SqlDatabaseComputeModel
        value: Serverless
      - name: SqlDatabaseAutoPauseDelayInMinutes
        value: 60
      - name: SqlDatabaseMinCapacity
        value: 2
      - name: SqlDatabaseMaxCapacity
        value: 8
      - name: SqlDatabaseBackupStorageRedundancy
        value: Zone
      - name: SqlDatabaseMaxStorageSize
        value: 50GB

      # MySQL
      - name: MySqlServerLocation
        value: $(Location)
      - name: PublicMySqlServerName
        value: $(ResourceBaseName)-pmy-${{ parameters.EnvironmentName }}
      - name: PrivateEndpointMySqlServerName
        value: $(ResourceBaseName)-emy-${{ parameters.EnvironmentName }}
      - name: VNetWhitelistingMySqlServerName
        value: $(ResourceBaseName)-vmy-${{ parameters.EnvironmentName }}
      - name: MySqlServerUsername
        value: mysqluser
      - name: MySqlServerPassword
        value: $(ResourcePassword)
      - name: MySqlServerResourceGroupName
        value: $(ResourceGroupName)
      - name: MySqlServerSkuName
        value: GP_Gen5_2
      - name: MySqlServerStorageSizeInMB
        value: 51200
      - name: MySqlServerPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: MySqlServerPrivateEndpointVnetName
        value: $(VnetName)
      - name: MySqlServerPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: MySqlDatabaseName
        value: mymysqldb

      # PostgreSQL
      - name: PostgreSqlServerResourceGroupName
        value: $(ResourceGroupName)
      - name: PublicPostgreSqlServerName
        value: $(ResourceBaseName)-ppg-${{ parameters.EnvironmentName }}
      - name: PrivateEndpointPostgreSqlServerName
        value: $(ResourceBaseName)-epg-${{ parameters.EnvironmentName }}
      - name: VNetWhitelistingPostgreSqlServerName
        value: $(ResourceBaseName)-vpg-${{ parameters.EnvironmentName }}
      - name: PostgreSqlServerUsername
        value: postgresqluser
      - name: PostgreSqlServerPassword
        value: $(ResourcePassword)
      - name: PostgreSqlServerSku
        value: GP_Gen5_2
      - name: BackupRetentionInDays
        value: 7
      - name: PostgreSqlServerVersion
        value: 11
      - name: PostgreSqlServerPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: PostgreSqlServerPrivateEndpointVnetName
        value: $(VnetName)
      - name: PostgreSqlServerPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: PostgreSqlDatabaseName
        value: mypostgresdb

      # Redis Cache
      - name: RedisInstanceLocation
        value: $(Location)
      - name: RedisInstanceResourceGroupName
        value: $(ResourceGroupName)
      - name: PublicRedisInstanceName
        value: $(ResourceBaseName)-prc-${{ parameters.EnvironmentName }}
      - name: PrivateEndpointRedisInstanceName
        value: $(ResourceBaseName)-erc-${{ parameters.EnvironmentName }}
      - name: RedisInstanceSkuName
        value: Standard
      - name: RedisInstanceVmSize
        value: C1
      - name: RedisInstancePrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: RedisInstancePrivateEndpointVnetName
        value: $(VnetName)
      - name: RedisInstancePrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)

      # Log analytics workspace
      - name: LogAnalyticsWorkspaceResourceGroupName
        value: $(ResourceGroupName)
      - name: LogAnalyticsWorkspaceName
        value: $(ResourceBaseName)-LAW-${{ parameters.EnvironmentName }}
      - name: LogAnalyticsWorkspaceRetentionInDays
        value: 180
      - name: LogAnalyticsWorkspaceSolutionTypes
        value: "@('VMInsights', 'AlertManagement')"

      # Storage accounts
      - name: StorageAccountResourceGroupName
        value: $(ResourceGroupName)
      - name: StorageAccountKind
        value: StorageV2
      - name: StorageAccountSku
        value: Standard_LRS
      - name: StorageAccountPrivateEndpointVnetName
        value: $(VnetName)
      - name: StorageAccountPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: StorageAccountPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: StorageAccountPrivateEndpointGroupId
        value: blob
      - name: StorageAccountPrivateDnsZoneName
        value: privatelink.blob.core.windows.net
      - name: StorageAccountQueueName
        value: mytestqueue
      - name: StorageAccountFileShareName
        value: mytestshare

      # Service Bus
      - name: PublicServiceBusNamespaceName
        value: $(ResourceBaseName)-psb-${{ parameters.EnvironmentName }}
      - name: PrivateEndpointServiceBusNamespaceName
        value: $(ResourceBaseName)-esb-${{ parameters.EnvironmentName }}
      - name: VnetWhitelistingServiceBusNamespaceName
        value: $(ResourceBaseName)-vsb-${{ parameters.EnvironmentName }}
      - name: ServiceBusNamespaceResourceGroupName
        value: $(ResourceGroupName)
      - name: ServiceBusNamespaceSku
        value: Premium
      - name: ServiceBusNamespacePrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: ServiceBusNamespacePrivateEndpointVnetName
        value: $(VnetName)
      - name: ServiceBusNamespacePrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)

      # Container Registry
      - name: PublicContainerRegistryName
        value: $(ResourceBaseName)-pacr-${{ parameters.EnvironmentName }}
      - name: VNetWhitelistingContainerRegistryName
        value: $(ResourceBaseName)-vacr-${{ parameters.EnvironmentName }}
      - name: PrivateEndpointContainerRegistryName
        value: $(ResourceBaseName)-eacr-${{ parameters.EnvironmentName }}
      - name: ContainerRegistryResourceGroupName
        value: $(ResourceGroupName)
      - name: ContainerRegistryPrivateEndpointVnetName
        value: $(VnetName)
      - name: ContainerRegistryPrivateEndpointVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: ContainerRegistryPrivateEndpointSubnetName
        value: $(PrivateEndpointSubnetName)
      - name: ContainerRegistryPrivateEndpointGroupId
        value: registry

      # Container Instances
      - name: PublicContainerName
        value: $(ResourceBaseName)-pci-${{ parameters.EnvironmentName }}
      - name: PrivateContainerName
        value: $(ResourceBaseName)-eci-${{ parameters.EnvironmentName }}
      - name: ContainerResourceGroupName
        value: $(ResourceGroupName)
      - name: ContainerCpuCount
        value: 4
      - name: ContainerMemoryInGb
        value: 8
      - name: ContainerOs
        value: Linux
      - name: ContainerPorts
        value: "80 443"
      - name: ContainerImageName
        value: nginx
      - name: ContainerVnetName
        value: $(VnetName)
      - name: ContainerVnetResourceGroupName
        value: $(VnetResourceGroupName)
      - name: ContainerSubnetName
        value: "$(ResourceBaseName)-aci-subnet"
      - name: ContainerSubnet
        value: 10.0.4.0/24

    jobs:
      - deployment: "ResourceGroup"
        displayName: "Resource Group"
        environment:
          name: ${{ parameters.EnvironmentName }}
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ResourceGroup.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= RESOURCEGROUP =========================================
                - task: AzureCLI@2
                  displayName: "Create ResourceGroup"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ResourceGroup.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Resourcegroup/Create-ResourceGroup.ps1"
                    arguments: "-ResourceGroupLocation '$(Location)'
                      -ResourceGroupName '$(ResourceGroupName)'
                      -ResourceTags $(ResourceTags)"
      - deployment: "BaseResources"
        displayName: "Base Resources (LAW & AppInsights)"
        dependsOn: "ResourceGroup"
        environment:
          name: ${{ parameters.EnvironmentName }}
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= LOG ANALYTICS WORKSPACE =========================================
                - task: AzureCLI@2
                  displayName: "Register Microsoft.Insights Provider"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.LogAnalyticsWorkspace.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Resource-Provider/Register-Provider.ps1"
                    arguments: "-ResourceProviderNamespace 'Microsoft.Insights'"
                - task: AzureCLI@2
                  displayName: "Create Log Analytics Workspace"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.LogAnalyticsWorkspace.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Log-Analytics-Workspace/Create-Log-Analytics-Workspace.ps1"
                    arguments: "-LogAnalyticsWorkspaceResourceGroupName '$(LogAnalyticsWorkspaceResourceGroupName)' -LogAnalyticsWorkspaceName '$(LogAnalyticsWorkspaceName)' -LogAnalyticsWorkspaceRetentionInDays '$(LogAnalyticsWorkspaceRetentionInDays)' -PublicInterfaceIngestionEnabled -PublicInterfaceQueryAccess -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceSolutionTypes $(LogAnalyticsWorkspaceSolutionTypes)"
                - task: AzureCLI@2
                  displayName: "Get Log Analytics Workspace Resource Id"
                  name: GetLogAnalyticsWorkspaceResourceIdforPipeline
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Log-Analytics-Workspace/Get-Log-Analytics-Workspace-ResourceId-for-Pipeline.ps1"
                    arguments: "-LogAnalyticsWorkspaceResourceGroupName '$(LogAnalyticsWorkspaceResourceGroupName)' -LogAnalyticsWorkspaceName '$(LogAnalyticsWorkspaceName)' -OutputPipelineVariableName 'LogAnalyticsWorkspaceResourceId'"
                - task: AzureCLI@2
                  displayName: "Get Log Analytics Workspace Id"
                  name: GetLogAnalyticsWorkspaceIdforPipeline
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Log-Analytics-Workspace/Get-Log-Analytics-Workspace-Id-for-Pipeline.ps1"
                    arguments: "-LogAnalyticsWorkspaceResourceGroupName '$(LogAnalyticsWorkspaceResourceGroupName)' -LogAnalyticsWorkspaceName '$(LogAnalyticsWorkspaceName)' -OutputPipelineVariableName 'LogAnalyticsWorkspaceId'"
                - task: AzureCLI@2
                  displayName: "Get Log Analytics Workspace Key"
                  name: GetLogAnalyticsWorkspaceKeyforPipeline
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Log-Analytics-Workspace/Get-Log-Analytics-Workspace-Key-for-Pipeline.ps1"
                    arguments: "-LogAnalyticsWorkspaceResourceGroupName '$(LogAnalyticsWorkspaceResourceGroupName)' -LogAnalyticsWorkspaceName '$(LogAnalyticsWorkspaceName)' -OutputPipelineVariableName 'LogAnalyticsWorkspaceKey'"
                # ========================================= APP INSIGHTS =========================================
                - task: AzureCLI@2
                  displayName: "Create AppInsights Resource"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppInsights.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-AppInsights-Resource.ps1"
                    arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -AppInsightsLocation '$(Location)' -LogAnalyticsWorkspaceResourceId '$(GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId)'"
      - deployment: "Networking"
        displayName: "Networking"
        dependsOn: "ResourceGroup"
        environment:
          name: ${{ parameters.EnvironmentName }}
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Networking.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= NETWORKING =========================================
                - task: AzureCLI@2
                  displayName: "Create App Service VNet integration subnet"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Networking.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Networking/Create-subnet-with-VNET-if-needed.ps1"
                    arguments: "-VnetResourceGroupName '$(VnetResourceGroupName)' -VnetName '$(VnetName)' -VnetCidr '$(VnetCidr)' -SubnetName '$(AppServiceVnetIntegrationSubnetName)' -Subnet '$(AppServiceVnetIntegrationSubnet)' -ResourceTags $(ResourceTags)"
                - task: AzureCLI@2
                  displayName: "Create Private Endpoint subnet"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Networking.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Networking/Create-subnet-with-VNET-if-needed.ps1"
                    arguments: "-VnetResourceGroupName '$(VnetResourceGroupName)' -VnetName '$(VnetName)' -VnetCidr '$(VnetCidr)' -SubnetName '$(PrivateEndpointSubnetName)' -Subnet '$(PrivateEndpointSubnet)' -ResourceTags $(ResourceTags)"
                - task: AzureCLI@2
                  displayName: "Create Application Gateway subnet"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Networking.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Networking/Create-subnet-with-VNET-if-needed.ps1"
                    arguments: "-VnetResourceGroupName '$(VnetResourceGroupName)' -VnetName '$(VnetName)' -VnetCidr '$(VnetCidr)' -SubnetName '$(ApplicationGatewaySubnetName)' -Subnet '$(ApplicationGatewaySubnet)' -ResourceTags $(ResourceTags)"
                - task: AzureCLI@2
                  displayName: "Create Container subnet"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Networking.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Networking/Create-subnet-with-VNET-if-needed.ps1"
                    arguments: "-VnetResourceGroupName '$(VnetResourceGroupName)' -VnetName '$(VnetName)' -VnetCidr '$(VnetCidr)' -SubnetName '$(ContainerSubnetName)' -Subnet '$(ContainerSubnet)' -ResourceTags $(ResourceTags)"
                - task: AzureCLI@2
                  displayName: "Add Custom DNS Server to VNET"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Networking.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Networking/Add-Custom-DNS-Server-To-VNET.ps1"
                    arguments: "-VnetResourceGroupName '$(VnetResourceGroupName)' -VnetName '$(VnetName)' -DNSServers '$(DNSServers)'"
      - deployment: "AppServicePlan"
        displayName: "App Service Plan"
        dependsOn: "ResourceGroup"
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP SERVICE =========================================
                - task: AzureCLI@2
                  displayName: "Create App Service Plan Linux"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Create-App-Service-Plan-Linux.ps1"
                    arguments: "-AppServicePlanName '$(LinuxAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -AppServicePlanSkuName '$(AppServicePlanSkuName)' -AppServicePlanNumberOfWorkerInstances '$(AppServicePlanNumberOfWorkerInstances)' -ResourceTags $(ResourceTags)"
                - task: AzureCLI@2
                  displayName: "Create App Service Plan Windows"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Create-App-Service-Plan-Windows.ps1"
                    arguments: "-AppServicePlanName '$(WindowsAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -AppServicePlanSkuName '$(AppServicePlanSkuName)' -AppServicePlanNumberOfWorkerInstances '$(AppServicePlanNumberOfWorkerInstances)' -ResourceTags $(ResourceTags)"
      - deployment: "Public_AppConfig"
        displayName: "AppConfig (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppConfiguration.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP CONFIG =========================================
                - task: AzureCLI@2
                  displayName: "Create (Public) App Configuration"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppConfiguration.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Configuration/Create-App-Configuration.ps1"
                    arguments: "-AppConfigName '$(PublicAppConfigName)' -AppConfigLocation '$(AppConfigLocation)' -AppConfigResourceGroupName '$(AppConfigResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -AppConfigSku '$(AppConfigSku)' -AppConfigAllowPublicAccess $true -ForcePublic"
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: AzureCLI@2
                  displayName: "Import Json Configuration File"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppConfiguration.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    failOnStandardError: true
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Configuration/Import-Json-Configuration-File.ps1"
                    arguments: "-AppConfigName '$(PublicAppConfigName)' -Label '$(AppConfigLabel)' -JsonFilePath 'tests/Tests.Regression/Pipeline.TestFiles/appconfig.json' -KeyPrefix '$(AppConfigKeyPrefix)'"
      - deployment: "PrivateEndpoint_AppConfig"
        displayName: "AppConfig (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppConfiguration.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP CONFIG =========================================
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) App Configuration"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppConfiguration.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Configuration/Create-App-Configuration.ps1"
                    arguments: "-AppConfigPrivateEndpointVnetResourceGroupName '$(AppConfigPrivateEndpointVnetResourceGroupName)' -AppConfigPrivateEndpointVnetName '$(AppConfigPrivateEndpointVnetName)' -AppConfigPrivateEndpointSubnetName '$(AppConfigPrivateEndpointSubnetName)' -AppConfigName '$(PrivateEndpointAppConfigName)' -AppConfigLocation '$(AppConfigLocation)' -AppConfigResourceGroupName '$(AppConfigResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -AppConfigSku '$(AppConfigSku)' -AppConfigAllowPublicAccess $false"
                # THIS CURRENTLY DOESNT WORK DUE TO PVT ENDPOINTS
                #- checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                #- task: AzureCLI@2
                #  displayName: 'Import Json Configuration File'
                #  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppConfiguration.Enabled'], 'true'))
                #  inputs:
                #    azureSubscription: '${{ parameters.SubscriptionName }}'
                #    scriptType: pscore
                #    failOnStandardError: true
                #    scriptPath: '$(Pipeline.Workspace)/AzDocs/App-Configuration/Import-Json-Configuration-File.ps1'
                #    arguments: "-AppConfigName '$(PrivateEndpointAppConfigName)' -Label '$(AppConfigLabel)' -JsonFilePath 'tests/Tests.Regression/Pipeline.TestFiles/appconfig.json' -KeyPrefix '$(AppConfigKeyPrefix)'"
      - deployment: "Public_AppService"
        displayName: "App Service (Public)"
        dependsOn: ["ResourceGroup", "BaseResources", "AppServicePlan"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP SERVICE =========================================
                - task: AzureCLI@2
                  displayName: "Create Web App (Public)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Create-Web-App.ps1"
                    arguments: "-AppServicePlanName '$(LinuxAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PublicAppServiceName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -AppServiceRunTime '$(AppServiceRunTime)' -AppServiceNumberOfInstances '$(AppServiceNumberOfInstances)' -ResourceTags $(ResourceTags) -AppServiceAlwaysOn $(AppServiceAlwaysOn) -EnableAppServiceDeploymentSlot -ForcePublic -DisablePublicAccessForAppServiceDeploymentSlot $false"
                - task: AzureCLI@2
                  displayName: "Create Application Insights Extension for WebApps codeless"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-WebApps-codeless.ps1"
                    arguments: "-AppInsightsName '$(AppInsightsName)' -AppServiceName '$(PublicAppServiceName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -EnableExtensiveDiagnostics $true -ApplyToAllSlots $(ApplyToAllSlots)"
                # Add binding to App Service is impossible to run, because we have DNS involved.
                #- task: AzureCLI@2
                #  displayName: 'Add binding to App Service'
                #  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                #  inputs:
                #    azureSubscription: '${{ parameters.SubscriptionName }}'
                #    scriptType: pscore
                #    scriptPath: '$(Pipeline.Workspace)/AzDocs/App-Services/Add-Binding-To-App-Service.ps1'
                #    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PublicAppServiceName)' -DomainNameToBind 'public.dummy.com'"
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: AzurePowerShell@5
                  displayName: "Add Public Certificate to App Service"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    ScriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Add-Public-Certificate-to-App-Service.ps1"
                    ScriptArguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PublicAppServiceName)' -AppServiceCertificateName '$(AppServiceCertificateName)' -AppServiceCertificateFilePath '$(AppServiceCertificateFilePath)'"
                    FailOnStandardError: true
                    azurePowerShellVersion: LatestVersion
                    pwsh: true
      - deployment: "PrivateEndpoint_AppService"
        displayName: "App Service (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources", "AppServicePlan"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP SERVICE =========================================
                - task: AzureCLI@2
                  displayName: "Create Web App (Private Endpoint)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Create-Web-App.ps1"
                    arguments: "-AppServicePlanName '$(LinuxAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PrivateEndpointAppServiceName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -AppServiceRunTime '$(AppServiceRunTime)' -AppServiceNumberOfInstances '$(AppServiceNumberOfInstances)' -ResourceTags $(ResourceTags) -AppServiceAlwaysOn $(AppServiceAlwaysOn) -EnableAppServiceDeploymentSlot -AppServicePrivateEndpointVnetResourceGroupName '$(AppServicePrivateEndpointVnetResourceGroupName)' -AppServicePrivateEndpointVnetName '$(AppServicePrivateEndpointVnetName)' -AppServicePrivateEndpointSubnetName '$(AppServicePrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)'"
                - task: AzureCLI@2
                  displayName: "Add VNet integration to (Private Endpoint) AppService"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Add-VNet-integration-to-AppService.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PrivateEndpointAppServiceName)' -AppServiceVnetIntegrationVnetName '$(AppServiceVnetIntegrationVnetName)' -AppServiceVnetIntegrationSubnetName '$(AppServiceVnetIntegrationSubnetName)' -ApplyToAllSlots $(ApplyToAllSlots)"
                - task: AzureCLI@2
                  displayName: "Create Application Insights Extension for WebApps codeless"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-WebApps-codeless.ps1"
                    arguments: "-AppInsightsName '$(AppInsightsName)' -AppServiceName '$(PrivateEndpointAppServiceName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -EnableExtensiveDiagnostics $true -ApplyToAllSlots $(ApplyToAllSlots)"
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: AzurePowerShell@5
                  displayName: "Add Public Certificate to App Service"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    ScriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Add-Public-Certificate-to-App-Service.ps1"
                    ScriptArguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PrivateEndpointAppServiceName)' -AppServiceCertificateName '$(AppServiceCertificateName)' -AppServiceCertificateFilePath '$(AppServiceCertificateFilePath)'"
                    FailOnStandardError: true
                    azurePowerShellVersion: LatestVersion
                    pwsh: true
      - deployment: "VNetWhitelisting_AppService"
        displayName: "App Service (VNet Whitelisting)"
        dependsOn: ["ResourceGroup", "BaseResources", "AppServicePlan"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP SERVICE =========================================
                - task: AzureCLI@2
                  displayName: "Create Web App (VNet Whitelisting)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Create-Web-App.ps1"
                    arguments: "-AppServicePlanName '$(LinuxAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(VNetWhitelistingAppServiceName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -AppServiceRunTime '$(AppServiceRunTime)' -AppServiceNumberOfInstances '$(AppServiceNumberOfInstances)' -ResourceTags $(ResourceTags) -AppServiceAlwaysOn $(AppServiceAlwaysOn) -EnableAppServiceDeploymentSlot -GatewayVnetResourceGroupName '$(ApplicationGatewayVnetResourceGroupName)' -GatewayVnetName '$(ApplicationGatewayVnetName)' -GatewaySubnetName '$(ApplicationGatewaySubnetName)'"
                - task: AzureCLI@2
                  displayName: "Add VNet integration to (VNet Whitelisting) AppService"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Add-VNet-integration-to-AppService.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(VNetWhitelistingAppServiceName)' -AppServiceVnetIntegrationVnetName '$(AppServiceVnetIntegrationVnetName)' -AppServiceVnetIntegrationSubnetName '$(AppServiceVnetIntegrationSubnetName)' -ApplyToAllSlots $(ApplyToAllSlots)"
                - task: AzureCLI@2
                  displayName: "Create Application Insights Extension for WebApps codeless"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-WebApps-codeless.ps1"
                    arguments: "-AppInsightsName '$(AppInsightsName)' -AppServiceName '$(VNetWhitelistingAppServiceName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -EnableExtensiveDiagnostics $true -ApplyToAllSlots $(ApplyToAllSlots)"
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: AzurePowerShell@5
                  displayName: "Add Public Certificate to App Service"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    ScriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Add-Public-Certificate-to-App-Service.ps1"
                    ScriptArguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(VNetWhitelistingAppServiceName)' -AppServiceCertificateName '$(AppServiceCertificateName)' -AppServiceCertificateFilePath '$(AppServiceCertificateFilePath)'"
                    FailOnStandardError: true
                    azurePowerShellVersion: LatestVersion
                    pwsh: true
      - deployment: "Public_Keyvault"
        displayName: "Keyvault (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= KEYVAULT =========================================
                - task: AzureCLI@2
                  displayName: "Create Keyvault (Public)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Keyvault/Create-Keyvault.ps1"
                    arguments: "-KeyvaultName '$(PublicKeyvaultName)' -KeyvaultResourceGroupName '$(KeyvaultResourceGroupName)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ForcePublic"
                - task: AzureCLI@2
                  displayName: "Grant Me Permissions On Keyvault"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Keyvault/Grant-Me-Permissions-On-Keyvault.ps1"
                    arguments: "-KeyvaultName '$(PublicKeyvaultName)' -KeyvaultResourceGroupName '$(KeyvaultResourceGroupName)' -KeyvaultCertificatePermissions 'get list update create' -KeyvaultKeyPermissions 'list get create import create update' -KeyvaultSecretPermissions 'delete get list purge recover restore set' -KeyvaultStoragePermissions 'delete get getsas list listsas purge recover regeneratekey restore set setsas update'"
                - task: AzureCLI@2
                  displayName: "Create Keyvault Key on (Public) Keyvault"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Keyvault/Create-Keyvault-Key.ps1"
                    arguments: "-KeyVaultName '$(PublicKeyvaultName)' -KeyName '$(KeyvaultKeyName)'"
                - task: AzureCLI@2
                  displayName: "Create Keyvault Secret"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Keyvault/Create-Keyvault-Secret.ps1"
                    arguments: "-KeyVaultName '$(PublicKeyvaultName)' -SecretName '$(KeyvaultSecretName)' -SecretDescription 'Dummy secret' -SecretValue 'Ultrasecretvalue!'"
                - task: AzureCLI@2
                  displayName: "Set (Public) Keyvault Permissions for (Public) AppService Identity"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Keyvault/Set-Keyvault-Permissions-for-AppService-Identity.ps1"
                    arguments: "-AppServiceName '$(PublicAppServiceName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -KeyvaultCertificatePermissions 'get list' -KeyvaultKeyPermissions 'list get' -KeyvaultSecretPermissions 'get list' -KeyvaultStoragePermissions 'get list' -KeyvaultName '$(PublicKeyvaultName)' -AppServiceSlotName 'staging'"
      - deployment: "PrivateEndpoint_Keyvault"
        displayName: "Keyvault (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= KEYVAULT =========================================
                - task: AzureCLI@2
                  displayName: "Create Keyvault (Private Endpoint)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Keyvault/Create-Keyvault.ps1"
                    arguments: "-KeyvaultName '$(PrivateEndpointKeyvaultName)' -KeyvaultResourceGroupName '$(KeyvaultResourceGroupName)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -KeyvaultPrivateEndpointVnetResourceGroupName '$(KeyvaultPrivateEndpointVnetResourceGroupName)' -KeyvaultPrivateEndpointVnetName '$(KeyvaultPrivateEndpointVnetName)' -KeyvaultPrivateEndpointSubnetName '$(KeyvaultPrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -KeyvaultPrivateDnsZoneName '$(KeyvaultPrivateDnsZoneName)'"
      - deployment: "VNetWhitelisting_Keyvault"
        displayName: "Keyvault (VNet Whitelisting)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= KEYVAULT =========================================
                - task: AzureCLI@2
                  displayName: "Create Keyvault (VNET Whitelisting)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.Keyvault.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Keyvault/Create-Keyvault.ps1"
                    arguments: "-KeyvaultName '$(VNetWhitelistingKeyvaultName)' -KeyvaultResourceGroupName '$(KeyvaultResourceGroupName)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationSubnetName '$(ApplicationSubnetName)'"
      - deployment: "ApplicationGateway"
        displayName: "Application Gateway"
        dependsOn:
          ["ResourceGroup", "BaseResources", "VNetWhitelisting_Keyvault"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ApplicationGateway.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APPLICATION GATEWAY =========================================
                - task: AzureCLI@2
                  displayName: "Create Application Gateway"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ApplicationGateway.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Application-Gateway/Create-Application-Gateway.ps1"
                    arguments: "-ApplicationGatewayName '$(ApplicationGatewayName)' -ApplicationGatewayResourceGroupName '$(ApplicationGatewayResourceGroupName)' -ApplicationGatewayVnetName '$(ApplicationGatewayVnetName)' -ApplicationGatewayVnetResourceGroupName '$(ApplicationGatewayVnetResourceGroupName)' -ApplicationGatewaySubnetName '$(ApplicationGatewaySubnetName)' -ApplicationGatewayCapacity '$(ApplicationGatewayCapacity)' -ApplicationGatewaySku '$(ApplicationGatewaySku)' -CertificateKeyvaultName '$(PublicKeyvaultName)' -CertificateKeyvaultResourceGroupName '$(KeyvaultResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
      - deployment: "Public_MSSQL"
        displayName: "MSSQL (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SQL SERVER =========================================
                - task: AzureCLI@2
                  displayName: "Create SQL Server (Public)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/SQL-Server/Create-SQL-Server.ps1"
                    arguments: "-SqlServerPassword '$(SqlServerPassword)' -SqlServerUsername '$(SqlServerUsername)' -SqlServerName '$(PublicSqlServerName)' -SqlServerResourceGroupName '$(SqlServerResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -SqlServerMinimalTlsVersion '$(SqlServerMinimalTlsVersion)' -SqlServerEnablePublicNetwork $true -ForcePublic"
                - task: AzureCLI@2
                  displayName: "Create (Public) SQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/SQL-Server/Create-SQL-Database.ps1"
                    arguments: "-SqlServerResourceGroupName '$(SqlServerResourceGroupName)' -SqlServerName '$(PublicSqlServerName)' -SqlDatabaseName '$(SqlDatabaseName)' -SqlDatabaseEdition '$(SqlDatabaseEdition)' -SqlDatabaseFamily '$(SqlDatabaseFamily)' -SqlDatabaseComputeModel '$(SqlDatabaseComputeModel)' -SqlDatabaseAutoPauseDelayInMinutes '$(SqlDatabaseAutoPauseDelayInMinutes)' -SqlDatabaseMinCapacity '$(SqlDatabaseMinCapacity)' -SqlDatabaseMaxCapacity '$(SqlDatabaseMaxCapacity)' -SqlDatabaseBackupStorageRedundancy '$(SqlDatabaseBackupStorageRedundancy)' -SqlDatabaseMaxStorageSize '$(SqlDatabaseMaxStorageSize)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ResourceTags $(ResourceTags)"
      - deployment: "PrivateEndpoint_MSSQL"
        displayName: "MSSQL (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SQL SERVER =========================================
                - task: AzureCLI@2
                  displayName: "Create SQL Server (Private Endpoint)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/SQL-Server/Create-SQL-Server.ps1"
                    arguments: "-SqlServerPassword '$(SqlServerPassword)' -SqlServerUsername '$(SqlServerUsername)' -SqlServerName '$(PrivateEndpointSqlServerName)' -SqlServerResourceGroupName '$(SqlServerResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -SqlServerMinimalTlsVersion '$(SqlServerMinimalTlsVersion)' -SqlServerPrivateEndpointVnetResourceGroupName '$(SqlServerPrivateEndpointVnetResourceGroupName)' -SqlServerPrivateEndpointVnetName '$(SqlServerPrivateEndpointVnetName)' -SqlServerPrivateEndpointSubnetName '$(SqlServerPrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -SqlServerPrivateDnsZoneName '$(SqlServerPrivateDnsZoneName)'"
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) SQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/SQL-Server/Create-SQL-Database.ps1"
                    arguments: "-SqlServerResourceGroupName '$(SqlServerResourceGroupName)' -SqlServerName '$(PrivateEndpointSqlServerName)' -SqlDatabaseName '$(SqlDatabaseName)' -SqlDatabaseEdition '$(SqlDatabaseEdition)' -SqlDatabaseFamily '$(SqlDatabaseFamily)' -SqlDatabaseComputeModel '$(SqlDatabaseComputeModel)' -SqlDatabaseAutoPauseDelayInMinutes '$(SqlDatabaseAutoPauseDelayInMinutes)' -SqlDatabaseMinCapacity '$(SqlDatabaseMinCapacity)' -SqlDatabaseMaxCapacity '$(SqlDatabaseMaxCapacity)' -SqlDatabaseBackupStorageRedundancy '$(SqlDatabaseBackupStorageRedundancy)' -SqlDatabaseMaxStorageSize '$(SqlDatabaseMaxStorageSize)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ResourceTags $(ResourceTags)"
      - deployment: "VNetWhitelisting_MSSQL"
        displayName: "MSSQL (VNet Whitelisting)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SQL SERVER =========================================
                - task: AzureCLI@2
                  displayName: "Create SQL Server (VNet Whitelisting)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/SQL-Server/Create-SQL-Server.ps1"
                    arguments: "-SqlServerPassword '$(SqlServerPassword)' -SqlServerUsername '$(SqlServerUsername)' -SqlServerName '$(VNetWhitelistingSqlServerName)' -SqlServerResourceGroupName '$(SqlServerResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -SqlServerMinimalTlsVersion '$(SqlServerMinimalTlsVersion)' -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationSubnetName '$(ApplicationSubnetName)'"
                - task: AzureCLI@2
                  displayName: "Create (VNet Whitelisting) SQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MSSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/SQL-Server/Create-SQL-Database.ps1"
                    arguments: "-SqlServerResourceGroupName '$(SqlServerResourceGroupName)' -SqlServerName '$(VNetWhitelistingSqlServerName)' -SqlDatabaseName '$(SqlDatabaseName)' -SqlDatabaseEdition '$(SqlDatabaseEdition)' -SqlDatabaseFamily '$(SqlDatabaseFamily)' -SqlDatabaseComputeModel '$(SqlDatabaseComputeModel)' -SqlDatabaseAutoPauseDelayInMinutes '$(SqlDatabaseAutoPauseDelayInMinutes)' -SqlDatabaseMinCapacity '$(SqlDatabaseMinCapacity)' -SqlDatabaseMaxCapacity '$(SqlDatabaseMaxCapacity)' -SqlDatabaseBackupStorageRedundancy '$(SqlDatabaseBackupStorageRedundancy)' -SqlDatabaseMaxStorageSize '$(SqlDatabaseMaxStorageSize)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ResourceTags $(ResourceTags)"
      - deployment: "Public_MySQL"
        displayName: "MySQL (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= MYSQL SERVER =========================================
                - task: AzureCLI@2
                  displayName: "Create MySQL (Public) Server"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/MySQL/Create-MySQL-Server.ps1"
                    arguments: "-MySqlServerLocation '$(MySqlServerLocation)' -MySqlServerName '$(PublicMySqlServerName)' -MySqlServerUsername '$(MySqlServerUsername)' -MySqlServerPassword '$(MySqlServerPassword)' -MySqlServerResourceGroupName '$(MySqlServerResourceGroupName)' -MySqlServerSkuName '$(MySqlServerSkuName)' -MySqlServerStorageSizeInMB '$(MySqlServerStorageSizeInMB)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ForcePublic"
                - task: AzureCLI@2
                  displayName: "Create (Public) MySQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/MySQL/Create-MySQL-Database.ps1"
                    arguments: "-MySqlServerResourceGroupName '$(MySqlServerResourceGroupName)' -MySqlServerName '$(PublicMySqlServerName)' -MySqlDatabaseName '$(MySqlDatabaseName)'"
                - task: AzureCLI@2
                  displayName: "Add Network Whitelist to (Public) MySQL"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/MySQL/Add-Network-Whitelist-to-MySQL.ps1"
                    arguments: "-MySqlServerName '$(PublicMySqlServerName)' -MySqlServerResourceGroupName '$(MySqlServerResourceGroupName)' -CIDRToWhitelist '0.0.0.0/0' -ForcePublic"
      - deployment: "PrivateEndpoint_MySQL"
        displayName: "MySQL (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= MYSQL SERVER =========================================
                - task: AzureCLI@2
                  displayName: "Create MySQL (Private Endpoint) Server"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/MySQL/Create-MySQL-Server.ps1"
                    arguments: "-MySqlServerLocation '$(MySqlServerLocation)' -MySqlServerName '$(PrivateEndpointMySqlServerName)' -MySqlServerUsername '$(MySqlServerUsername)' -MySqlServerPassword '$(MySqlServerPassword)' -MySqlServerResourceGroupName '$(MySqlServerResourceGroupName)' -MySqlServerSkuName '$(MySqlServerSkuName)' -MySqlServerStorageSizeInMB '$(MySqlServerStorageSizeInMB)' -ResourceTags $(ResourceTags) -MySqlServerPrivateEndpointVnetResourceGroupName '$(MySqlServerPrivateEndpointVnetResourceGroupName)' -MySqlServerPrivateEndpointVnetName '$(MySqlServerPrivateEndpointVnetName)' -MySqlServerPrivateEndpointSubnetName '$(MySqlServerPrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) MySQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/MySQL/Create-MySQL-Database.ps1"
                    arguments: "-MySqlServerResourceGroupName '$(MySqlServerResourceGroupName)' -MySqlServerName '$(PrivateEndpointMySqlServerName)' -MySqlDatabaseName '$(MySqlDatabaseName)'"
      - deployment: "VNetWhitelisting_MySQL"
        displayName: "MySQL (VNet Whitelisting)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= MYSQL SERVER =========================================
                - task: AzureCLI@2
                  displayName: "Create MySQL (VNet Whitelisting) Server"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/MySQL/Create-MySQL-Server.ps1"
                    arguments: "-MySqlServerLocation '$(MySqlServerLocation)' -MySqlServerName '$(VNetWhitelistingMySqlServerName)' -MySqlServerUsername '$(MySqlServerUsername)' -MySqlServerPassword '$(MySqlServerPassword)' -MySqlServerResourceGroupName '$(MySqlServerResourceGroupName)' -MySqlServerSkuName '$(MySqlServerSkuName)' -MySqlServerStorageSizeInMB '$(MySqlServerStorageSizeInMB)' -ResourceTags $(ResourceTags) -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationSubnetName '$(ApplicationSubnetName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
                - task: AzureCLI@2
                  displayName: "Create (VNet Whitelisting) MySQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.MySQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/MySQL/Create-MySQL-Database.ps1"
                    arguments: "-MySqlServerResourceGroupName '$(MySqlServerResourceGroupName)' -MySqlServerName '$(VNetWhitelistingMySqlServerName)' -MySqlDatabaseName '$(MySqlDatabaseName)'"
      - deployment: "Public_PostgreSQL"
        displayName: "PostgreSQL (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= POSTGRESQL =========================================
                - task: AzureCLI@2
                  displayName: "Create (Public) PostgreSQL Server"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/PostgreSQL/Create-PostgreSQL-Server.ps1"
                    arguments: "-PostgreSqlServerPassword '$(PostgreSqlServerPassword)' -PostgreSqlServerUsername '$(PostgreSqlServerUsername)' -PostgreSqlServerName '$(PublicPostgreSqlServerName)' -PostgreSqlServerResourceGroupName '$(PostgreSqlServerResourceGroupName)' -PostgreSqlServerSku '$(PostgreSqlServerSku)' -BackupRetentionInDays '$(BackupRetentionInDays)' -PostgreSqlServerVersion '$(PostgreSqlServerVersion)' -PostgreSqlServerPublicNetworkAccess 'Enabled' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ForcePublic"
                - task: AzureCLI@2
                  displayName: "Create (Public) PostgreSQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/PostgreSQL/Create-PostgreSQL-Database.ps1"
                    arguments: "-PostgreSqlServerResourceGroupName '$(PostgreSqlServerResourceGroupName)' -PostgreSqlServerName '$(PublicPostgreSqlServerName)' -PostgreSqlDatabaseName '$(PostgreSqlDatabaseName)'"
                - task: AzureCLI@2
                  displayName: "Add Network Whitelist to (Public) PostgreSQL"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/PostgreSQL/Add-Network-Whitelist-to-PostgreSQL.ps1"
                    arguments: "-PostgreSqlServerName '$(PublicPostgreSqlServerName)' -PostgreSqlServerResourceGroupName '$(PostgreSqlServerResourceGroupName)' -CIDRToWhitelist '0.0.0.0/0' -ForcePublic"
      - deployment: "PrivateEndpoint_PostgreSQL"
        displayName: "PostgreSQL (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= POSTGRESQL =========================================
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) PostgreSQL Server"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/PostgreSQL/Create-PostgreSQL-Server.ps1"
                    arguments: "-PostgreSqlServerPassword '$(PostgreSqlServerPassword)' -PostgreSqlServerUsername '$(PostgreSqlServerUsername)' -PostgreSqlServerName '$(PrivateEndpointPostgreSqlServerName)' -PostgreSqlServerResourceGroupName '$(PostgreSqlServerResourceGroupName)' -PostgreSqlServerSku '$(PostgreSqlServerSku)' -BackupRetentionInDays '$(BackupRetentionInDays)' -PostgreSqlServerVersion '$(PostgreSqlServerVersion)' -PostgreSqlServerPublicNetworkAccess 'Disabled' -PostgreSqlServerPrivateEndpointVnetResourceGroupName '$(PostgreSqlServerPrivateEndpointVnetResourceGroupName)' -PostgreSqlServerPrivateEndpointVnetName '$(PostgreSqlServerPrivateEndpointVnetName)' -PostgreSqlServerPrivateEndpointSubnetName '$(PostgreSqlServerPrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) PostgreSQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/PostgreSQL/Create-PostgreSQL-Database.ps1"
                    arguments: "-PostgreSqlServerResourceGroupName '$(PostgreSqlServerResourceGroupName)' -PostgreSqlServerName '$(PrivateEndpointPostgreSqlServerName)' -PostgreSqlDatabaseName '$(PostgreSqlDatabaseName)'"
      - deployment: "VNetWhitelisting_PostgreSQL"
        displayName: "PostgreSQL (VNet Whitelisting)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= POSTGRESQL =========================================
                - task: AzureCLI@2
                  displayName: "Create (VNet Whitelisting) PostgreSQL Server"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/PostgreSQL/Create-PostgreSQL-Server.ps1"
                    arguments: "-PostgreSqlServerPassword '$(PostgreSqlServerPassword)' -PostgreSqlServerUsername '$(PostgreSqlServerUsername)' -PostgreSqlServerName '$(VNetWhitelistingPostgreSqlServerName)' -PostgreSqlServerResourceGroupName '$(PostgreSqlServerResourceGroupName)' -PostgreSqlServerSku '$(PostgreSqlServerSku)' -BackupRetentionInDays '$(BackupRetentionInDays)' -PostgreSqlServerVersion '$(PostgreSqlServerVersion)' -PostgreSqlServerPublicNetworkAccess 'Disabled' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationSubnetName '$(ApplicationSubnetName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
                - task: AzureCLI@2
                  displayName: "Create (VNet Whitelisting) PostgreSQL Database"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.PostgreSQL.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/PostgreSQL/Create-PostgreSQL-Database.ps1"
                    arguments: "-PostgreSqlServerResourceGroupName '$(PostgreSqlServerResourceGroupName)' -PostgreSqlServerName '$(VNetWhitelistingPostgreSqlServerName)' -PostgreSqlDatabaseName '$(PostgreSqlDatabaseName)'"
      - deployment: "Public_RedisCache"
        displayName: "RedisCache (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.RedisCache.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= REDIS CACHE =========================================
                - task: AzureCLI@2
                  displayName: "Create (Public) RedisCache Instance"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.RedisCache.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/RedisCache/Create-RedisCache-Instance.ps1"
                    arguments: "-RedisInstanceLocation '$(RedisInstanceLocation)' -RedisInstanceName '$(PublicRedisInstanceName)' -RedisInstanceResourceGroupName '$(RedisInstanceResourceGroupName)' -RedisInstanceSkuName '$(RedisInstanceSkuName)' -RedisInstanceVmSize '$(RedisInstanceVmSize)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ForcePublic"
      - deployment: "PrivateEndpoint_RedisCache"
        displayName: "RedisCache (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.RedisCache.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= REDIS CACHE =========================================
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) RedisCache Instance"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.RedisCache.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/RedisCache/Create-RedisCache-Instance.ps1"
                    arguments: "-RedisInstanceLocation '$(RedisInstanceLocation)' -RedisInstanceName '$(PrivateEndpointRedisInstanceName)' -RedisInstanceResourceGroupName '$(RedisInstanceResourceGroupName)' -RedisInstanceSkuName '$(RedisInstanceSkuName)' -RedisInstanceVmSize '$(RedisInstanceVmSize)' -ResourceTags $(ResourceTags) -RedisInstancePrivateEndpointVnetResourceGroupName '$(RedisInstancePrivateEndpointVnetResourceGroupName)' -RedisInstancePrivateEndpointVnetName '$(RedisInstancePrivateEndpointVnetName)' -RedisInstancePrivateEndpointSubnetName '$(RedisInstancePrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
      - deployment: "Public_StorageAccount"
        displayName: "Storage Account (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= STORAGE ACCOUNTS =========================================
                - task: PowerShell@2
                  displayName: Generate StorageAccountNames
                  name: GeneratePublicStorageAccountName
                  inputs:
                    targetType: "inline"
                    script: |
                      $PublicStorageAccountNameToLower = "$(ResourceBaseName)pstg${{ parameters.EnvironmentName }}".ToLower() -replace "-", ""
                      Write-Host "PublicStorageAccountNameToLower: $PublicStorageAccountNameToLower"
                      Write-Host "##vso[task.setvariable variable=PublicStorageAccountNameToLower;isOutput=true]$PublicStorageAccountNameToLower"
                - task: AzureCLI@2
                  displayName: "Create Storage account (Public)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Storage-account.ps1"
                    arguments: "-StorageAccountResourceGroupName '$(StorageAccountResourceGroupName)' -ResourceTags $(ResourceTags) -StorageAccountName '$(GeneratePublicStorageAccountName.PublicStorageAccountNameToLower)' -StorageAccountKind '$(StorageAccountKind)'-StorageAccountSku '$(StorageAccountSku)' -StorageAccountAllowBlobPublicAccess $true -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ForcePublic"
                - task: AzureCLI@2
                  displayName: "Create Blobcontainer in (Public) StorageAccount"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Blobcontainer-in-StorageAccount.ps1"
                    arguments: "-StorageAccountName '$(GeneratePublicStorageAccountName.PublicStorageAccountNameToLower)' -BlobContainerName 'myblobcontainer' -StorageAccountResourceGroupName '$(StorageAccountResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
                - task: AzureCLI@2
                  displayName: "Create Queue in (Public) StorageAccount"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Queue-in-StorageAccount.ps1"
                    arguments: "-StorageAccountName '$(GeneratePublicStorageAccountName.PublicStorageAccountNameToLower)' -QueueName '$(StorageAccountQueueName)' -StorageAccountResourceGroupName '$(StorageAccountResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
                - task: AzureCLI@2
                  displayName: "Create Fileshare in StorageAccount"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Fileshare-in-StorageAccount.ps1"
                    arguments: "-StorageAccountResourceGroupname '$(StorageAccountResourceGroupname)' -StorageAccountName '$(GeneratePublicStorageAccountName.PublicStorageAccountNameToLower)' -FileshareName '$(StorageAccountFileShareName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
                - task: AzureCLI@2
                  displayName: "Grant Permissions for (Public) AppService to (Public) StorageAccount Blob Container"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Grant-Permissions-for-AppService-to-StorageAccount.ps1"
                    arguments: "-StorageResourceGroupName '$(StorageAccountResourceGroupName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PublicAppServiceName)' -StorageAccountName '$(GeneratePublicStorageAccountName.PublicStorageAccountNameToLower)' -RoleToAssign 'Storage Blob Data Contributor' -ApplyToAllSlots $true"
                - task: AzureCLI@2
                  displayName: "Grant Permissions for (Public) AppService to (Public) StorageAccount Blob Container"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Grant-Permissions-for-AppService-to-StorageAccount.ps1"
                    arguments: "-StorageResourceGroupName '$(StorageAccountResourceGroupName)' -AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PublicAppServiceName)' -StorageAccountName '$(GeneratePublicStorageAccountName.PublicStorageAccountNameToLower)' -RoleToAssign 'Storage Queue Data Contributor' -ApplyToAllSlots $true"
      - deployment: "PrivateEndpoint_StorageAccount"
        displayName: "Storage Account (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= STORAGE ACCOUNTS =========================================
                - task: PowerShell@2
                  displayName: Generate StorageAccountNames
                  name: GeneratePrivateEndpointStorageAccountName
                  inputs:
                    targetType: "inline"
                    script: |
                      $PrivateEndpointStorageAccountNameToLower = "$(ResourceBaseName)estg${{ parameters.EnvironmentName }}".ToLower() -replace "-", ""
                      Write-Host "PrivateEndpointStorageAccountNameToLower: $PrivateEndpointStorageAccountNameToLower"
                      Write-Host "##vso[task.setvariable variable=PrivateEndpointStorageAccountNameToLower;isOutput=true]$PrivateEndpointStorageAccountNameToLower"
                - task: AzureCLI@2
                  displayName: "Create Storage account (Private Endpoint)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Storage-account.ps1"
                    arguments: "-StorageAccountResourceGroupName '$(StorageAccountResourceGroupName)' -ResourceTags $(ResourceTags) -StorageAccountName '$(GeneratePrivateEndpointStorageAccountName.PrivateEndpointStorageAccountNameToLower)' -StorageAccountKind '$(StorageAccountKind)'-StorageAccountSku '$(StorageAccountSku)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -StorageAccountPrivateEndpointVnetName '$(StorageAccountPrivateEndpointVnetName)' -StorageAccountPrivateEndpointVnetResourceGroupName '$(StorageAccountPrivateEndpointVnetResourceGroupName)' -StorageAccountPrivateEndpointSubnetName '$(StorageAccountPrivateEndpointSubnetName)' -PrivateEndpointGroupId '$(StorageAccountPrivateEndpointGroupId)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -StorageAccountPrivateDnsZoneName '$(StorageAccountPrivateDnsZoneName)'"
      - deployment: "VNetWhitelisting_StorageAccount"
        displayName: "Storage Account (VNet Whitelisting)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= STORAGE ACCOUNTS =========================================
                - task: PowerShell@2
                  displayName: Generate StorageAccountNames
                  name: GenerateVnetWhitelistingStorageAccountName
                  inputs:
                    targetType: "inline"
                    script: |
                      $VNetWhitelistingStorageAccountNameToLower = "$(ResourceBaseName)vstg${{ parameters.EnvironmentName }}".ToLower() -replace "-", ""
                      Write-Host "VNetWhitelistingStorageAccountNameToLower: $VNetWhitelistingStorageAccountNameToLower"
                      Write-Host "##vso[task.setvariable variable=VNetWhitelistingStorageAccountNameToLower;isOutput=true]$VNetWhitelistingStorageAccountNameToLower"
                - task: AzureCLI@2
                  displayName: "Create Storage account (VNET Whitelisting)"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.StorageAccounts.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Storage-Accounts/Create-Storage-account.ps1"
                    arguments: "-StorageAccountResourceGroupName '$(StorageAccountResourceGroupName)' -ResourceTags $(ResourceTags) -StorageAccountName '$(GenerateVnetWhitelistingStorageAccountName.VNetWhitelistingStorageAccountNameToLower)' -StorageAccountKind '$(StorageAccountKind)'-StorageAccountSku '$(StorageAccountSku)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationSubnetName '$(ApplicationSubnetName)'"
      - deployment: "Public_FunctionApp"
        displayName: "Function App (Public)"
        dependsOn: ["ResourceGroup", "BaseResources", "Public_StorageAccount"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
          PublicStorageAccountNameToLower: $[ dependencies.Public_StorageAccount.outputs['Public_StorageAccount.GeneratePublicStorageAccountName.PublicStorageAccountNameToLower'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= Functions =========================================
                - task: AzureCLI@2
                  displayName: "Create (Public) Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Create-Function-App.ps1"
                    arguments: "-AppServicePlanName '$(LinuxAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(PublicFunctionAppName)' -FunctionAppStorageAccountName '$(PublicFunctionAppStorageAccountName)' -FunctionAppOSType '$(FunctionAppOSType)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -FunctionAppAlwaysOn $(FunctionAppAlwaysOn) -FUNCTIONS_EXTENSION_VERSION '$(FUNCTIONS_EXTENSION_VERSION)' -ASPNETCORE_ENVIRONMENT '$(ASPNETCORE_ENVIRONMENT)' -FunctionAppNumberOfInstances '$(FunctionAppNumberOfInstances)' -FunctionAppRuntime '$(FunctionAppRuntime)' -ResourceTags $(ResourceTags) -EnableFunctionAppDeploymentSlot -DisablePublicAccessForFunctionAppDeploymentSlot $false -ForcePublic"
                - task: AzureCLI@2
                  displayName: "Add VNet integration to (Public) Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-VNet-integration-to-Function-App.ps1"
                    arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(PublicFunctionAppName)' -FunctionAppVnetIntegrationVnetName '$(AppServiceVnetIntegrationVnetName)' -FunctionAppVnetIntegrationSubnetName '$(AppServiceVnetIntegrationSubnetName)' -ApplyToAllSlots $true"
                - task: AzureCLI@2
                  displayName: "Create Application Insights Extension for FunctionApps codeless"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-FunctionApps-codeless.ps1"
                    arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -FunctionAppName '$(PublicFunctionAppName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -EnableExtensiveDiagnostics $true  -ApplyToAllSlots $(ApplyToAllSlots)"
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: AzurePowerShell@5
                  displayName: "Add Public Certificate to Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    ScriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-Public-Certificate-to-Function-App.ps1"
                    ScriptArguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(PublicFunctionAppName)' -FunctionAppCertificateName '$(FunctionAppCertificateName)' -FunctionAppCertificateFilePath '$(FunctionAppCertificateFilePath)'"
                    FailOnStandardError: true
                    azurePowerShellVersion: LatestVersion
                    pwsh: true
      - deployment: "PrivateEndpoint_FunctionApp"
        displayName: "Function App (Private Endpoint)"
        dependsOn:
          ["ResourceGroup", "BaseResources", "PrivateEndpoint_StorageAccount"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
          PrivateEndpointStorageAccountNameToLower: $[ dependencies.PrivateEndpoint_StorageAccount.outputs['PrivateEndpoint_StorageAccount.GeneratePrivateEndpointStorageAccountName.PrivateEndpointStorageAccountNameToLower'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= Functions =========================================
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Create-Function-App.ps1"
                    arguments: "-AppServicePlanName '$(LinuxAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(PrivateEndpointFunctionAppName)' -FunctionAppStorageAccountName '$(PrivateEndpointFunctionAppStorageAccountName)' -FunctionAppOSType '$(FunctionAppOSType)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -FunctionAppAlwaysOn $(FunctionAppAlwaysOn) -FUNCTIONS_EXTENSION_VERSION '$(FUNCTIONS_EXTENSION_VERSION)' -ASPNETCORE_ENVIRONMENT '$(ASPNETCORE_ENVIRONMENT)' -FunctionAppNumberOfInstances '$(FunctionAppNumberOfInstances)' -FunctionAppRuntime '$(FunctionAppRuntime)' -ResourceTags $(ResourceTags) -EnableFunctionAppDeploymentSlot -DisablePublicAccessForFunctionAppDeploymentSlot $true -FunctionAppPrivateEndpointVnetResourceGroupName '$(FunctionAppPrivateEndpointVnetResourceGroupName)' -FunctionAppPrivateEndpointVnetName '$(FunctionAppPrivateEndpointVnetName)' -FunctionAppPrivateEndpointSubnetName '$(FunctionAppPrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)'"
                - task: AzureCLI@2
                  displayName: "Add VNet integration to (Private Endpoint) Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-VNet-integration-to-Function-App.ps1"
                    arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(PrivateEndpointFunctionAppName)' -FunctionAppVnetIntegrationVnetName '$(AppServiceVnetIntegrationVnetName)' -FunctionAppVnetIntegrationSubnetName '$(AppServiceVnetIntegrationSubnetName)' -ApplyToAllSlots $true"
                - task: AzureCLI@2
                  displayName: "Create Application Insights Extension for FunctionApps codeless"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-FunctionApps-codeless.ps1"
                    arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -FunctionAppName '$(PrivateEndpointFunctionAppName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -EnableExtensiveDiagnostics $true  -ApplyToAllSlots $(ApplyToAllSlots)"
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: AzurePowerShell@5
                  displayName: "Add Public Certificate to Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    ScriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-Public-Certificate-to-Function-App.ps1"
                    ScriptArguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(PrivateEndpointFunctionAppName)' -FunctionAppCertificateName '$(FunctionAppCertificateName)' -FunctionAppCertificateFilePath '$(FunctionAppCertificateFilePath)'"
                    FailOnStandardError: true
                    azurePowerShellVersion: LatestVersion
                    pwsh: true
      - deployment: "VnetWhitelisting_FunctionApp"
        displayName: "Function App (VNet Whitelisting)"
        dependsOn:
          ["ResourceGroup", "BaseResources", "VNetWhitelisting_StorageAccount"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
          VNetWhitelistingStorageAccountNameToLower: $[ dependencies.VNetWhitelisting_StorageAccount.outputs['VNetWhitelisting_StorageAccount.GenerateVnetWhitelistingStorageAccountName.VNetWhitelistingStorageAccountNameToLower'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= Functions =========================================
                - task: AzureCLI@2
                  displayName: "Create (VNet Whitelisting) Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Create-Function-App.ps1"
                    arguments: "-AppServicePlanName '$(LinuxAppServicePlanName)' -AppServicePlanResourceGroupName '$(AppServicePlanResourceGroupName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(VNetWhitelistingFunctionAppName)' -FunctionAppStorageAccountName '$(VNetWhitelistingFunctionAppStorageAccountName)' -FunctionAppOSType '$(FunctionAppOSType)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -FunctionAppAlwaysOn $(FunctionAppAlwaysOn) -FUNCTIONS_EXTENSION_VERSION '$(FUNCTIONS_EXTENSION_VERSION)' -ASPNETCORE_ENVIRONMENT '$(ASPNETCORE_ENVIRONMENT)' -FunctionAppNumberOfInstances '$(FunctionAppNumberOfInstances)' -FunctionAppRuntime '$(FunctionAppRuntime)' -ResourceTags $(ResourceTags) -EnableFunctionAppDeploymentSlot -DisablePublicAccessForFunctionAppDeploymentSlot $true -GatewayVnetResourceGroupName '$(ApplicationGatewayVnetResourceGroupName)' -GatewayVnetName '$(ApplicationGatewayVnetName)' -GatewaySubnetName '$(ApplicationGatewaySubnetName)'"
                - task: AzureCLI@2
                  displayName: "Add VNet integration to (VNet Whitelisting) Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-VNet-integration-to-Function-App.ps1"
                    arguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(VNetWhitelistingFunctionAppName)' -FunctionAppVnetIntegrationVnetName '$(AppServiceVnetIntegrationVnetName)' -FunctionAppVnetIntegrationSubnetName '$(AppServiceVnetIntegrationSubnetName)' -ApplyToAllSlots $true"
                - task: AzureCLI@2
                  displayName: "Create Application Insights Extension for FunctionApps codeless"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/AppInsights/Create-Application-Insights-Extension-for-FunctionApps-codeless.ps1"
                    arguments: "-AppInsightsName '$(AppInsightsName)' -AppInsightsResourceGroupName '$(AppInsightsResourceGroupName)' -FunctionAppName '$(VNetWhitelistingFunctionAppName)' -FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -EnableExtensiveDiagnostics $true  -ApplyToAllSlots $(ApplyToAllSlots)"
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: AzurePowerShell@5
                  displayName: "Add Public Certificate to Function App"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.FunctionApp.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    ScriptPath: "$(Pipeline.Workspace)/AzDocs/Functions/Add-Public-Certificate-to-Function-App.ps1"
                    ScriptArguments: "-FunctionAppResourceGroupName '$(FunctionAppResourceGroupName)' -FunctionAppName '$(VNetWhitelistingFunctionAppName)' -FunctionAppCertificateName '$(FunctionAppCertificateName)' -FunctionAppCertificateFilePath '$(FunctionAppCertificateFilePath)'"
                    FailOnStandardError: true
                    azurePowerShellVersion: LatestVersion
                    pwsh: true
      - deployment: "Public_AppService_PostConfiguration"
        displayName: "App Service (Public) Post Configuration"
        dependsOn:
          [
            "ResourceGroup",
            "BaseResources",
            "Public_AppService",
            "Public_StorageAccount",
          ]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
          PublicStorageAccountNameToLower: $[ dependencies.Public_StorageAccount.outputs['Public_StorageAccount.GeneratePublicStorageAccountName.PublicStorageAccountNameToLower'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP SERVICE POST-CREATION CONFIGURATION =========================================
                - task: AzureCLI@2
                  displayName: "Set AppSettings For AppService"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Set-AppSettings-For-AppService.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PublicAppServiceName)' -AppServiceAppSettings $(AppServiceAppSettings) -AppServiceDeploymentSlotName 'staging'"
                - task: AzureCLI@2
                  name: GetRedisCacheConnectionStringforPipeline
                  displayName: "Get RedisCache ConnectionString for Pipeline"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/RedisCache/Get-RedisCache-ConnectionString-for-Pipeline.ps1"
                    arguments: "-RedisInstanceResourceGroupName '$(RedisInstanceResourceGroupName)' -RedisInstanceName '$(PublicRedisInstanceName)'"
                - task: AzureCLI@2
                  displayName: "Set ConnectionStrings For AppService"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Set-ConnectionStrings-For-AppService.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(PublicAppServiceName)' -AppServiceConnectionStringsInJson '$(AppServiceConnectionStringsInJson)' -AppServiceDeploymentSlotName 'staging'"
                # ========================================= APP SERVICE CONTENT DEPLOYMENT =========================================
                - task: DownloadBuildArtifacts@0
                  displayName: Download Application Binaries to deploy
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "Website_zip"
                    downloadPath: "$(System.ArtifactsDirectory)"
                - task: AzureRmWebAppDeployment@4
                  displayName: Deploy Application Binaries to Azure App Service
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    appType: "webAppLinux"
                    WebAppName: "$(PublicAppServiceName)"
                    deployToSlotOrASE: true
                    ResourceGroupName: "$(AppServiceResourceGroupName)"
                    SlotName: "$(AppServiceDeploymentSlotName)"
                    packageForLinux: "$(System.ArtifactsDirectory)/Website_zip/website.zip"
      - deployment: "VnetWhitelisting_AppService_PostConfiguration"
        displayName: "App Service (VNet Whitelisting) Post Configuration"
        dependsOn:
          ["ResourceGroup", "BaseResources", "VnetWhitelisting_AppService"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APP SERVICE POST-CREATION CONFIGURATION =========================================
                - task: AzureCLI@2
                  displayName: "Set AppSettings For AppService"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Set-AppSettings-For-AppService.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(VnetWhitelistingAppServiceName)' -AppServiceAppSettings $(AppServiceAppSettings) -AppServiceDeploymentSlotName 'staging'"
                - task: AzureCLI@2
                  displayName: "Set ConnectionStrings For AppService"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Set-ConnectionStrings-For-AppService.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(VnetWhitelistingAppServiceName)' -AppServiceConnectionStringsInJson '$(AppServiceConnectionStringsInJson)' -AppServiceDeploymentSlotName 'staging'"
                # ========================================= APP SERVICE CONTENT DEPLOYMENT =========================================
                - task: AzureCLI@2
                  displayName: "Add Network Whitelist to App Service"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Add-Network-Whitelist-to-App-Service.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(VnetWhitelistingAppServiceName)' -AppServiceDeploymentSlotName '$(AppServiceDeploymentSlotName)'"
                - task: DownloadBuildArtifacts@0
                  displayName: Download Application Binaries to deploy
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "Website_zip"
                    downloadPath: "$(System.ArtifactsDirectory)"
                - task: AzureRmWebAppDeployment@4
                  displayName: Deploy Application Binaries to Azure App Service
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    ConnectionType: "AzureRM"
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    appType: "webAppLinux"
                    WebAppName: "$(VnetWhitelistingAppServiceName)"
                    deployToSlotOrASE: true
                    ResourceGroupName: "$(AppServiceResourceGroupName)"
                    SlotName: "$(AppServiceDeploymentSlotName)"
                    packageForLinux: "$(System.ArtifactsDirectory)/Website_zip/website.zip"
      - deployment: "Public_ContainerRegistry"
        displayName: "Container Registry (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerRegistry.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= CONTAINER REGISTRY =========================================
                - task: PowerShell@2
                  displayName: Generate ACR Resource Names
                  name: GenerateAcrResourceNames
                  inputs:
                    targetType: "inline"
                    script: |
                      $PublicContainerRegistryNameToLower = "$(ResourceBaseName)pacr${{ parameters.EnvironmentName }}".ToLower() -replace "-", ""
                      Write-Host "PublicContainerRegistryNameToLower: $PublicContainerRegistryNameToLower"
                      Write-Host "##vso[task.setvariable variable=PublicContainerRegistryNameToLower;isOutput=true]$PublicContainerRegistryNameToLower"
                - task: AzureCLI@2
                  displayName: "Create (Public) Container Registry"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerRegistry.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Container-Registry/Create-Container-Registry.ps1"
                    arguments: "-ContainerRegistryName '$(GenerateAcrResourceNames.PublicContainerRegistryNameToLower)' -ContainerRegistryResourceGroupName '$(ContainerRegistryResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ForcePublic"
      - deployment: "PrivateEndpoint_ContainerRegistry"
        displayName: "Container Registry (Private Endpoint)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerRegistry.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= CONTAINER REGISTRY =========================================
                - task: PowerShell@2
                  displayName: Generate ACR Resource Names
                  name: GenerateAcrResourceNames
                  inputs:
                    targetType: "inline"
                    script: |
                      $PrivateEndpointContainerRegistryNameToLower = "$(ResourceBaseName)eacr${{ parameters.EnvironmentName }}".ToLower() -replace "-", ""
                      Write-Host "PrivateEndpointContainerRegistryNameToLower: $PrivateEndpointContainerRegistryNameToLower"
                      Write-Host "##vso[task.setvariable variable=PrivateEndpointContainerRegistryNameToLower;isOutput=true]$PrivateEndpointContainerRegistryNameToLower"
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) Container Registry"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerRegistry.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Container-Registry/Create-Container-Registry.ps1"
                    arguments: "-ContainerRegistryName '$(GenerateAcrResourceNames.PrivateEndpointContainerRegistryNameToLower)' -ContainerRegistryResourceGroupName '$(ContainerRegistryResourceGroupName)' -ContainerRegistryPrivateEndpointVnetName '$(ContainerRegistryPrivateEndpointVnetName)' -ContainerRegistryPrivateEndpointVnetResourceGroupName '$(ContainerRegistryPrivateEndpointVnetResourceGroupName)' -ContainerRegistryPrivateEndpointSubnetName '$(ContainerRegistryPrivateEndpointSubnetName)' -PrivateEndpointGroupId '$(ContainerRegistryPrivateEndpointGroupId)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
      - deployment: "VNetWhitelisting_ContainerRegistry"
        displayName: "Container Registry (VNet Whitelisting)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerRegistry.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= CONTAINER REGISTRY =========================================
                - task: PowerShell@2
                  displayName: Generate ACR Resource Names
                  name: GenerateAcrResourceNames
                  inputs:
                    targetType: "inline"
                    script: |
                      $VNetWhitelistingContainerRegistryNameToLower = "$(ResourceBaseName)vacr${{ parameters.EnvironmentName }}".ToLower() -replace "-", ""
                      Write-Host "VNetWhitelistingContainerRegistryNameToLower: $VNetWhitelistingContainerRegistryNameToLower"
                      Write-Host "##vso[task.setvariable variable=VNetWhitelistingContainerRegistryNameToLower;isOutput=true]$VNetWhitelistingContainerRegistryNameToLower"
                - task: AzureCLI@2
                  displayName: "Create (VNet Whitelisting) Container Registry"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerRegistry.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Container-Registry/Create-Container-Registry.ps1"
                    arguments: "-ContainerRegistryName '$(GenerateAcrResourceNames.VNetWhitelistingContainerRegistryNameToLower)' -ContainerRegistryResourceGroupName '$(ContainerRegistryResourceGroupName)' -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationSubnetName '$(ApplicationSubnetName)' -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
      - deployment: "Public_ContainerInstance"
        displayName: "Container Instance (Public)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceIdforPipeline.LogAnalyticsWorkspaceId'] ]
          LogAnalyticsWorkspaceKey: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceKeyforPipeline.LogAnalyticsWorkspaceKey'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerInstance.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= CONTAINER INSTANCE =========================================
                - task: AzureCLI@2
                  displayName: "Create (Public) Container Instance"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerInstance.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Container-Instance/Create-Container.ps1"
                    arguments: "-ContainerName '$(PublicContainerName)' -ContainerResourceGroupName '$(ContainerResourceGroupName)' -ContainerCpuCount '$(ContainerCpuCount)' -ContainerMemoryInGb '$(ContainerMemoryInGb)' -ContainerOs '$(ContainerOs)' -ContainerPorts '$(ContainerPorts)' -ContainerImageName '$(ContainerImageName)' -ContainerIpAddressType 'Public' -LogAnalyticsWorkspaceId '$(LogAnalyticsWorkspaceId)' -LogAnalyticsWorkspaceKey '$(LogAnalyticsWorkspaceKey)' -ForcePublic"
      - deployment: "Private_ContainerInstance"
        displayName: "Container Instance (Private)"
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceIdforPipeline.LogAnalyticsWorkspaceId'] ]
          LogAnalyticsWorkspaceKey: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceKeyforPipeline.LogAnalyticsWorkspaceKey'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerInstance.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= CONTAINER INSTANCE =========================================
                - task: AzureCLI@2
                  displayName: "Create (Private) Container Instance"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ContainerInstance.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Container-Instance/Create-Container.ps1"
                    arguments: "-ContainerName '$(PrivateContainerName)' -ContainerResourceGroupName '$(ContainerResourceGroupName)' -ContainerCpuCount '$(ContainerCpuCount)' -ContainerMemoryInGb '$(ContainerMemoryInGb)' -ContainerOs '$(ContainerOs)' -ContainerPorts '$(ContainerPorts)' -ContainerImageName '$(ContainerImageName)' -ContainerVnetName '$(ContainerVnetName)' -ContainerVnetResourceGroupName '$(ContainerVnetResourceGroupName)' -ContainerSubnetName '$(ContainerSubnetName)' -ContainerIpAddressType 'Private' -LogAnalyticsWorkspaceId '$(LogAnalyticsWorkspaceId)' -LogAnalyticsWorkspaceKey '$(LogAnalyticsWorkspaceKey)'"
      - deployment: "Public_ServiceBus"
        displayName: Service Bus (Public)
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ServiceBus.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SERVICE BUS =========================================
                - task: AzureCLI@2
                  displayName: "Create (Public) ServiceBus Namespace"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ServiceBus.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/ServiceBus/Create-ServiceBus-Namespace.ps1"
                    arguments: "-ServiceBusNamespaceName '$(PublicServiceBusNamespaceName)' -ServiceBusNamespaceResourceGroupName '$(ServiceBusNamespaceResourceGroupName)' -ServiceBusNamespaceSku '$(ServiceBusNamespaceSku)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)' -ForcePublic"
      - deployment: "PrivateEndpoint_ServiceBus"
        displayName: Service Bus (Private Endpoint)
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ServiceBus.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SERVICE BUS =========================================
                - task: AzureCLI@2
                  displayName: "Create (Private Endpoint) ServiceBus Namespace"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ServiceBus.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/ServiceBus/Create-ServiceBus-Namespace.ps1"
                    arguments: "-ServiceBusNamespaceName '$(PrivateEndpointServiceBusNamespaceName)' -ServiceBusNamespaceResourceGroupName '$(ServiceBusNamespaceResourceGroupName)' -ServiceBusNamespaceSku '$(ServiceBusNamespaceSku)' -ServiceBusNamespacePrivateEndpointVnetResourceGroupName '$(ServiceBusNamespacePrivateEndpointVnetResourceGroupName)' -ServiceBusNamespacePrivateEndpointVnetName '$(ServiceBusNamespacePrivateEndpointVnetName)' -ServiceBusNamespacePrivateEndpointSubnetName '$(ServiceBusNamespacePrivateEndpointSubnetName)' -DNSZoneResourceGroupName '$(DNSZoneResourceGroupName)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
      - deployment: "VnetWhitelisting_ServiceBus"
        displayName: Service Bus (VNet Whitelisting)
        dependsOn: ["ResourceGroup", "BaseResources"]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ServiceBus.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SERVICE BUS =========================================
                - task: AzureCLI@2
                  displayName: "Create (VNet Whitelisting) ServiceBus Namespace"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ServiceBus.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/ServiceBus/Create-ServiceBus-Namespace.ps1"
                    arguments: "-ServiceBusNamespaceName '$(VnetWhitelistingServiceBusNamespaceName)' -ServiceBusNamespaceResourceGroupName '$(ServiceBusNamespaceResourceGroupName)' -ServiceBusNamespaceSku '$(ServiceBusNamespaceSku)' -ApplicationVnetResourceGroupName '$(ApplicationVnetResourceGroupName)' -ApplicationVnetName '$(ApplicationVnetName)' -ApplicationSubnetName '$(ApplicationSubnetName)' -ResourceTags $(ResourceTags) -LogAnalyticsWorkspaceResourceId '$(LogAnalyticsWorkspaceResourceId)'"
      - deployment: "Playwright_Test_On_Public_AppService"
        displayName: Playwright Tests on (Public) App Service
        dependsOn:
          [
            "ResourceGroup",
            "BaseResources",
            "Public_AppService",
            "Public_AppService_PostConfiguration",
          ]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
          PLAYWRIGHT_BROWSERS_PATH: "0"
          DISPLAY: ":0.0"
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        pool:
          vmImage: "windows-latest"
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= RUN PLAYWRIGHT TESTS =========================================
                - checkout: self # MAKE SURE WE CHECKOUT THE REPO FOR THE PIPELINE TEST FILES
                - task: PowerShell@2
                  displayName: "Prepare Playwright env"
                  inputs:
                    pwsh: true
                    targetType: "inline"
                    script: |
                      #following the steps in https://playwright.dev/dotnet/docs/intro/

                      cd tests/Tests.Regression/TestApiTests/
                      dotnet tool install --global Microsoft.Playwright.CLI
                      dotnet add package Microsoft.Playwright
                      dotnet build
                      playwright install
                - task: PowerShell@2
                  displayName: "Update test.runsettings"
                  inputs:
                    pwsh: true
                    targetType: "inline"
                    script: |
                      $path = 'tests/Tests.Regression/test.runsettings'
                      $text = Get-Content $path
                      $newText = $text.Replace('http://localhost','https://$(PublicStagingDomainName)')
                      Write-Host $newText
                      $newText | out-file -FilePath $path -Force
                - task: DotNetCoreCLI@2
                  displayName: "dotnet test $(PublicStagingDomainName)"
                  inputs:
                    command: test
                    projects: "tests/Tests.Regression/TestApiTests/TestApi.Tests.csproj"
                    arguments: '--settings test.runsettings --collect "Code coverage"'
                    testRunTitle: RegressionTest
                    workingDirectory: "tests/Tests.Regression"
                - task: PublishTestResults@2
                  condition: always()
                  displayName: "Publish Test Results To Test Plan module"
                  inputs:
                    testResultsFormat: NUnit
                    testResultsFiles: log.html
                    searchFolder: "$(Agent.TempDirectory)/"
                    mergeTestResults: true
                    failTaskOnFailedTests: true
                    testRunTitle: RegressionTest
      - deployment: "Public_AppService_SwapSlots"
        displayName: App Service (Public) Swap Slots
        dependsOn:
          [
            "ResourceGroup",
            "BaseResources",
            "Public_AppService",
            "Public_AppService_PostConfiguration",
            "Playwright_Test_On_Public_AppService",
          ]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SWAP APPSERVICE SLOTS =========================================
                - task: AzureAppServiceManage@0
                  displayName: Swap Staging slot to Production
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    Action: "Swap Slots"
                    WebAppName: "$(PublicAppServiceName)"
                    ResourceGroupName: "$(AppServiceResourceGroupName)"
                    SourceSlot: "$(AppServiceDeploymentSlotName)"
                    PreserveVnet: true
      - deployment: "VnetWhitelisting_AppService_SwapSlots"
        displayName: App Service (VNet Whitelisting) Swap Slots
        dependsOn:
          [
            "ResourceGroup",
            "BaseResources",
            "VnetWhitelisting_AppService",
            "VnetWhitelisting_AppService_PostConfiguration",
          ]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= SWAP APPSERVICE SLOTS =========================================
                - task: AzureAppServiceManage@0
                  displayName: Swap Staging slot to Production
                  condition: and(succeeded(), eq(variables['ResourceCreation.AppService.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    Action: "Swap Slots"
                    WebAppName: "$(VnetWhitelistingAppServiceName)"
                    ResourceGroupName: "$(AppServiceResourceGroupName)"
                    SourceSlot: "$(AppServiceDeploymentSlotName)"
                    PreserveVnet: true
      - deployment: "Remove_AppService_Network_Whitelist"
        displayName: App Service (Remove Network Whitelist)
        dependsOn: ["VnetWhitelisting_AppService_SwapSlots"]
        condition: always()
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= REMOVE NETWORK WHITELIST FROM APPSERVICE =========================================
                - task: AzureCLI@2
                  displayName: "Remove Network Whitelist from App Service"
                  condition: always()
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/App-Services/Remove-Network-Whitelist-from-App-Service.ps1"
                    arguments: "-AppServiceResourceGroupName '$(AppServiceResourceGroupName)' -AppServiceName '$(VnetWhitelistingAppServiceName)' -AppServiceDeploymentSlotName '$(AppServiceDeploymentSlotName)' -ApplyToAllSlots $true"
      - deployment: "ApplicationGateway_PostConfiguration"
        displayName: Application Gateway (Post Configuration)
        dependsOn:
          [
            "ResourceGroup",
            "BaseResources",
            "ApplicationGateway",
            "Public_AppService_SwapSlots",
          ]
        environment:
          name: ${{ parameters.EnvironmentName }}
        variables:
          LogAnalyticsWorkspaceResourceId: $[ dependencies.BaseResources.outputs['BaseResources.GetLogAnalyticsWorkspaceResourceIdforPipeline.LogAnalyticsWorkspaceResourceId'] ]
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        strategy:
          runOnce:
            deploy:
              steps:
                # ========================================= DOWNLOAD AZDOCS =========================================
                - task: DownloadPipelineArtifact@2
                  displayName: Download AzDocs
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ApplicationGateway.Enabled'], 'true'))
                  inputs:
                    buildType: specific
                    project: $(AzDocsTeamProjectId)
                    definition: $(AzDocsBuildDefinitionId)
                    buildVersionToDownload: latestFromBranch
                    branchName: $(Build.SourceBranch)
                    artifactName: azdocs-src
                    targetPath: $(Pipeline.Workspace)/AzDocs
                # ========================================= APPLICATION GATEWAY =========================================
                - task: DownloadSecureFile@1
                  name: certificateDownload
                  displayName: "Download wildcard certificate from secure files"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ApplicationGateway.Enabled'], 'true'))
                  inputs:
                    secureFile: $(GatewayCertificateSecureFileName)
                    retryCount: "5"
                - task: AzureCLI@2
                  displayName: "Create Application Gateway Entrypoint for DomainName"
                  condition: and(succeeded(), eq(variables['DeployInfra'], 'true'), eq(variables['ResourceCreation.ApplicationGateway.Enabled'], 'true'))
                  inputs:
                    azureSubscription: "${{ parameters.SubscriptionName }}"
                    scriptType: pscore
                    scriptPath: "$(Pipeline.Workspace)/AzDocs/Application-Gateway/Create-Application-Gateway-Entrypoint-for-DomainName.ps1"
                    arguments: '-CertificatePath "$(certificateDownload.secureFilePath)" -DomainName "$(GatewayIngressDomainName)" -Gatewayname "$(ApplicationGatewayName)" -gatewayType "$(GatewayType)" -CertificateKeyvaultName "$(PublicKeyvaultName)" -certificatePassword "$(GatewayCertificatePassword)" -backendDomainName "$(BackendDomainName)" -healthProbePath "$(HealthProbePath)" -gatewayruletype "$(GatewayRuleType)" -healthProbeInterval "$(HealthProbeInterval)" -healthProbeThreshold "$(HealthProbeThreshold)" -healthProbeTimeout "$(HealthProbeTimeout)" -healthProbeProtocol "$(HealthProbeProtocol)" -httpsSettingsProtocol "$(HttpsSettingsProtocol)" -httpsSettingsPort "$(HttpsSettingsPort)" -httpsSettingsCookieAffinity "$(HttpsSettingsCookieAffinity)" -httpsSettingsConnectionDrainingTimeout "$(HttpsSettingsConnectionDrainingTimeout)" -httpsSettingsTimeout "$(HttpsSettingsTimeout)" -matchStatusCodes "$(MatchStatusCodes)" -ApplicationGatewayResourceGroupName "$(ApplicationGatewayResourceGroupName)" -CertificateKeyvaultResourceGroupName "$(KeyvaultResourceGroupName)"'
