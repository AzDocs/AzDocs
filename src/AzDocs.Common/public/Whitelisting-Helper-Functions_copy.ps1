#region Helper functions

<#
.SYNOPSIS
    Add Access restriction to app service and/or function app
.DESCRIPTION
    Add Access restriction to app service and/or function app
#>
# We need to check based on the following: 
# AccessRestrictionRuleName is always filled. Based upon AutoGeneratedAccessRestrictionRuleName we verify if we have to check on this. 
# OR CIDRToWhiteList is filled
# OR SubnetResourceId is filled 

# We want to check if the access restriction already exists, so that we don't send a delete for something that doesn't exist. 
function Add-AccessRestriction
{
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)][string] [ValidateSet('functionapp', 'webapp')]$AppType,
        [Parameter(Mandatory)][string] $ResourceGroupName,
        [Parameter(Mandatory)][string] $ResourceName,
        [Parameter()][string] $AccessRestrictionRuleDescription,
        [Parameter()][string] $DeploymentSlotName,
        [Parameter()][string] $AccessRestrictionAction = "Allow",
        [Parameter()][string] $Priority = 10,
        [Parameter()][string] $AccessRestrictionRuleName,
        [Parameter(Mandatory)][bool] $AutoGeneratedAccessRestrictionRuleName,
        [Parameter()][ValidatePattern('^$|^(?:(?:\d{1,3}.){3}\d{1,3})(?:\/(?:\d{1,2}))?$', ErrorMessage = "The text '{0}' does not match with the CIDR notation, like '1.2.3.4/32'")][string] $CIDRToWhitelist,
        [Parameter()][string] $SubnetResourceId,
        [Parameter()][bool] $ApplyToMainEntrypoint = $true,
        [Parameter()][bool] $ApplyToScmEntrypoint = $true
    )

    Write-Header -ScopedPSCmdlet $PSCmdlet

    # If CIDRToWhitelist is empty AND SubnetResourceId is empty, something went wrong.
    Confirm-CIDRorSubnetResourceId -CIDRToWhitelist $CIDRToWhitelist -SubnetResourceId $SubnetResourceId
    
    # fill parameters
    $optionalParameters = @()
    $removeIfExistsRestrictionParameters = @()
    if (!$AutoGeneratedAccessRestrictionRuleName)
    {
        $removeIfExistsRestrictionParameters += "-AccessRestrictionRuleName", "$AccessRestrictionRuleName"
    }
    
    if ($CIDRToWhitelist)
    {
        $removeIfExistsRestrictionParameters += "-CIDRToRemove", "$CIDRToWhitelist"
        $optionalParameters += "--ip-address", "$CIDRToWhitelist"
    }
    elseif ($SubnetResourceId)
    {
        $removeIfExistsRestrictionParameters += "-SubnetResourceId", "$subnetResourceId"
        $scriptArguments += "--subnet", "$subnetResourceId"
    }
   
    if ($DeploymentSlotName)
    {
        $removeIfExistsRestrictionParameters += "-DeploymentSlotName", "$DeploymentSlotName"
        $optionalParameters += "--slot", "$DeploymentSlotName"
    }
    
    if ($AccessRestrictionRuleDescription)
    {
        $optionalParameters += "--description", "$AccessRestrictionRuleDescription"
    }

    # Check and remove access restriction if it already exists
    Remove-AccessRestrictionIfExists -AppType $AppType -ResourceGroupName $ResourceGroupName -ResourceName $ResourceName -ApplyToMainEntryPoint $ApplyToMainEntryPoint -ApplyToScmEntryPoint $ApplyToScmEntryPoint @$removeIfExistsRestrictionParameters
    
    # SCM entrypoint
    if ($ApplyToScmEntrypoint)
    {
        Invoke-Executable az $AppType config access-restriction add --resource-group $ResourceGroupName --name $ResourceName --action $AccessRestrictionAction --priority $Priority --rule-name $AccessRestrictionRuleName --scm-site $true @optionalParameters
    }

    # Main entrypoint
    if ($ApplyToMainEntrypoint)
    {
        Invoke-Executable az $AppType config access-restriction add --resource-group $ResourceGroupName --name $ResourceName --action $AccessRestrictionAction --priority $Priority --rule-name $AccessRestrictionRuleName --scm-site $false @optionalParameters
    }

    Write-Footer -ScopedPSCmdlet $PSCmdlet
}

function Confirm-CIDRorSubnetResourceId
{
    [OutputType([boolean])]
    param (
        [Parameter()][string] $CIDRToWhitelist,
        [Parameter()][string] $SubnetResourceId
    )

    if (!$CIDRToWhitelist -and !$SubnetResourceId)
    {
        throw "CIDR not found & Subnet resource not found. Something went horribly wrong."
    }

    Write-Output $true
}

function Remove-AccessRestrictionIfExists
{
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)][string] [ValidateSet('functionapp', 'webapp')]$AppType,
        [Parameter(Mandatory)][string] $ResourceGroupName,
        [Parameter(Mandatory)][string] $ResourceName,
        [Parameter()][string] $AccessRestrictionRuleName,
        [Parameter()][string] $CIDRToRemove,
        [Parameter()][string] $SubnetResourceId,
        [Parameter()][string] $DeploymentSlotName,
        [Parameter()][bool] $ApplyToMainEntrypoint = $true,
        [Parameter()][bool] $ApplyToScmEntrypoint = $true
    )

    Write-Header -ScopedPSCmdlet $PSCmdlet

    Confirm-CIDRorSubnetResourceId -CIDRToWhitelist $CIDRToWhitelist -SubnetResourceId $SubnetResourceId

    $confirmAccessRestrictionParameters = @()
    $optionalParameters = @()

    # Accessrule whenever its not autogenerated
    if ($AccessRestrictionRuleName)
    {
        $confirmAccessRestrictionParameters += "-AccessRestrictionRuleName", "$AccessRestrictionRuleName"
        $optionalParameters += "--rule-name", "$AccessRestrictionRuleName"
    }

    # CIDR / Subnet
    if ($CIDRToWhitelist)
    {
        $confirmAccessRestrictionParameters += "-CIDR", "$CIDRToWhitelist"
        $optionalParameters += "--ip-address", "$CIDRToRemove"
    }
    elseif ($SubnetResourceId)
    {
        $confirmAccessRestrictionParameters += "-SubnetResourceId", "$subnetResourceId"
        $optionalParameters += "--subnet", "$SubnetResourceId"
    }

    # Deploymentslot
    if ($DeploymentSlotName)
    {
        $confirmAccessRestrictionParameters += "-DeploymentSlotName", "$DeploymentSlotName"
        $optionalParameters += "--slot", "$DeploymentSlotName"
    }

    if ($ApplyToScmEntrypoint -and (Confirm-AccessRestriction -AppType $AppType -ResourceGroupName $ResourceGroupName -ResourceName $ResourceName -SecurityRestrictionObjectName "scmIpSecurityRestrictions" @confirmAccessRestrictionParameters))
    {
        Invoke-Executable az $AppType config access-restriction remove --resource-group $ResourceGroupName --name $ResourceName --rule-name $AccessRestrictionRuleName --scm-site $true @optionalParameters
    }

    # Main entrypoint
    if ($ApplyToMainEntrypoint -and (Confirm-AccessRestriction -AppType $AppType -ResourceGroupName $ResourceGroupName -ResourceName $ResourceName -SecurityRestrictionObjectName "ipSecurityRestrictions" @confirmAccessRestrictionParameters))
    {
        Invoke-Executable az $AppType config access-restriction remove --resource-group $ResourceGroupName --name $ResourceName --rule-name $AccessRestrictionRuleName --scm-site $false @optionalParameters
    }
}

<#
.SYNOPSIS
    Check if Access restrictions exist on app service and/or function app
.DESCRIPTION
    Check if Access restrictions exist on app service and/or function app
#>

function Confirm-AccessRestriction
{  
    [OutputType([boolean])]
    param (
        [Parameter(Mandatory)][string] [ValidateSet('functionapp', 'webapp')] $AppType,
        [Parameter(Mandatory)][string] $ResourceGroupName,
        [Parameter(Mandatory)][string] $ResourceName,
        [Parameter()][string] $AccessRestrictionRuleName,
        [Parameter()][string] $CIDR,
        [Parameter()][string] $SubnetResourceId,
        [Parameter(Mandatory)][ValidateSet("ipSecurityRestrictions", "scmIpSecurityRestrictions")][string] $SecurityRestrictionObjectName,
        [Parameter()][string] $DeploymentSlotName,
        [Parameter()][bool] $ApplyToScmEntryPoint = $true,
        [Parameter()][bool] $ApplyToMainEntryPoint = $true
    )

    Write-Header -ScopedPSCmdlet $PSCmdlet

    Confirm-CIDRorSubnetResourceId -CIDRToWhitelist $CIDRToWhitelist -SubnetResourceId $SubnetResourceId

    $optionalParameters = @()
    if ($DeploymentSlotName)
    {
        $optionalParameters += "--slot", "$DeploymentSlotName"
    }

    $accessRestrictions = Invoke-Executable az $AppType config access-restriction show --resource-group $ResourceGroupName --name $ResourceName @optionalParameters | ConvertFrom-Json
    if (!$AccessRestrictionRuleName)
    {
        if ($CIDR)
        {
            if ($accessRestrictions.$SecurityRestrictionObjectName.ip_address -contains $CIDR)
            {
                Write-Host "Access restriction for type $SecurityRestrictionObjectName exists, continueing."
                # does this return the function? Or do we need to use an actual return?
                Write-Output $true
            }
            else
            {
                Write-Host "Access restriction for type $SecurityRestrictionObjectName does not exist. Creating."
                Write-Output $false
            }
        }
        elseif ($SubnetResourceId)
        {
            if ($accessRestrictions.$SecurityRestrictionObjectName.vnet_subnet_resource_id -contains $SubnetResourceId)
            {
                Write-Host "Access restriction for type $SecurityRestrictionObjectName already exists, continueing"
                Write-Output $true
            }
            else
            {
                Write-Host "Access restriction for type $SecurityRestrictionObjectName does not exist. Creating."
                Write-Output $false
            }
        }
    }

    #todo return
    # AccessRestrictionRuleName is known
    if ($CIDR)
    {
        if ($accessRestrictions.$SecurityRestrictionObjectName.Name -contains $AccessRestrictionRuleName -and $accessRestrictions.$SecurityRestrictionObjectName.ip_address -contains $CIDR)
        {
            Write-Host "Access restriction for type $SecurityRestrictionObjectName already exists, continueing"
            Write-Output $true
        }
        else
        {
            Write-Host "Access restriction for type $SecurityRestrictionObjectName does not exist. Creating."
            Write-Output $false
        }
    }
    elseif ($SubnetResourceId)
    {
        if ($accessRestrictions.$SecurityRestrictionObjectName.Name -contains $AccessRestrictionRuleName -and $accessRestrictions.$SecurityRestrictionObjectName.vnet_subnet_resource_id -contains $SubnetResourceId)
        {
            Write-Host "Access restriction for type $SecurityRestrictionObjectName already exists, continueing"
            Write-Output $true
        }
        else
        {
            Write-Host "Access restriction for type $SecurityRestrictionObjectName does not exist. Creating."
            Write-Output $false
        }
    }

    Write-Footer -ScopedPSCmdlet $PSCmdlet
}

<#
.SYNOPSIS
    Remove Access restriction from app service and/or function app
.DESCRIPTION
    Remove Access restriction from app service and/or function app
#>
function Remove-AccessRestriction
{
    [CmdletBinding()]
    param (
        [Parameter(Mandatory)][string] [ValidateSet('functionapp', 'webapp')]$AppType,
        [Parameter(Mandatory)][string] $ResourceGroupName,
        [Parameter(Mandatory)][string] $ResourceName,
        [Parameter(ParameterSetName = 'rulename', Mandatory)][string] $AccessRestrictionRuleName,
        [Parameter(ParameterSetName = 'cidr', Mandatory)][string] $CIDRToRemove,
        [Parameter(ParameterSetName = 'subnet', Mandatory)][string] $SubnetResourceId,
        [Parameter()][string] $DeploymentSlotName,
        [Parameter()][bool] $ApplyToMainEntrypoint = $true,
        [Parameter()][bool] $ApplyToScmEntrypoint = $true
    )

    Write-Header -ScopedPSCmdlet $PSCmdlet

    $optionalParameters = @()
    if ($DeploymentSlotName)
    {
        $optionalParameters += "--slot", "$DeploymentSlotName"
    }
 
    if ($AccessRestrictionRuleName)
    {
        $optionalParameters += "--rule-name", "$AccessRestrictionRuleName"
    }
    elseif ($SubnetResourceId)
    {
        $optionalParameters += "--subnet", "$SubnetResourceId"
    }
    elseif ($CIDRToRemove)
    {
        $optionalParameters += "--ip-address", "$CIDRToRemove"
    }
    else
    {
        throw "Couldnt find IP/Subnet/Accessrule information."
    }

    if ($ApplyToScmEntrypoint)
    {
        Invoke-Executable az $AppType config access-restriction remove --resource-group $ResourceGroupName --name $ResourceName --scm-site $true @optionalParameters 
    }
    
    if ($ApplyToMainEntrypoint)
    {
        Invoke-Executable az $AppType config access-restriction remove --resource-group $ResourceGroupName --name $ResourceName --scm-site $false @optionalParameters
    }

    Write-Footer -ScopedPSCmdlet $PSCmdlet
}

#endregion